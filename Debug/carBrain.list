
carBrain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002550  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080026f0  080026f0  000126f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002790  08002790  00012790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002794  08002794  00012794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000005c  20000000  08002798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
  7 .bss          00000fac  2000005c  2000005c  0002005c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001008  20001008  0002005c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017b22  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000035c4  00000000  00000000  00037bae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000639f  00000000  00000000  0003b172  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a98  00000000  00000000  00041518  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e20  00000000  00000000  00041fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000062dc  00000000  00000000  00042dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000044ca  00000000  00000000  000490ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004d576  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001bd4  00000000  00000000  0004d5f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080026d8 	.word	0x080026d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080026d8 	.word	0x080026d8

080001e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001e0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001e2:	4a0e      	ldr	r2, [pc, #56]	; (800021c <HAL_InitTick+0x3c>)
 80001e4:	4b0e      	ldr	r3, [pc, #56]	; (8000220 <HAL_InitTick+0x40>)
{
 80001e6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001e8:	7818      	ldrb	r0, [r3, #0]
 80001ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001ee:	fbb3 f3f0 	udiv	r3, r3, r0
 80001f2:	6810      	ldr	r0, [r2, #0]
 80001f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80001f8:	f000 f880 	bl	80002fc <HAL_SYSTICK_Config>
 80001fc:	4604      	mov	r4, r0
 80001fe:	b958      	cbnz	r0, 8000218 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000200:	2d0f      	cmp	r5, #15
 8000202:	d809      	bhi.n	8000218 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000204:	4602      	mov	r2, r0
 8000206:	4629      	mov	r1, r5
 8000208:	f04f 30ff 	mov.w	r0, #4294967295
 800020c:	f000 f842 	bl	8000294 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000210:	4b04      	ldr	r3, [pc, #16]	; (8000224 <HAL_InitTick+0x44>)
 8000212:	4620      	mov	r0, r4
 8000214:	601d      	str	r5, [r3, #0]
 8000216:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000218:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 800021a:	bd38      	pop	{r3, r4, r5, pc}
 800021c:	20000058 	.word	0x20000058
 8000220:	20000000 	.word	0x20000000
 8000224:	20000004 	.word	0x20000004

08000228 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000228:	4a07      	ldr	r2, [pc, #28]	; (8000248 <HAL_Init+0x20>)
{
 800022a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800022c:	6813      	ldr	r3, [r2, #0]
 800022e:	f043 0310 	orr.w	r3, r3, #16
 8000232:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000234:	2003      	movs	r0, #3
 8000236:	f000 f81b 	bl	8000270 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800023a:	200f      	movs	r0, #15
 800023c:	f7ff ffd0 	bl	80001e0 <HAL_InitTick>
  HAL_MspInit();
 8000240:	f002 f904 	bl	800244c <HAL_MspInit>
}
 8000244:	2000      	movs	r0, #0
 8000246:	bd08      	pop	{r3, pc}
 8000248:	40022000 	.word	0x40022000

0800024c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800024c:	4a03      	ldr	r2, [pc, #12]	; (800025c <HAL_IncTick+0x10>)
 800024e:	4b04      	ldr	r3, [pc, #16]	; (8000260 <HAL_IncTick+0x14>)
 8000250:	6811      	ldr	r1, [r2, #0]
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	440b      	add	r3, r1
 8000256:	6013      	str	r3, [r2, #0]
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	20000dc4 	.word	0x20000dc4
 8000260:	20000000 	.word	0x20000000

08000264 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000264:	4b01      	ldr	r3, [pc, #4]	; (800026c <HAL_GetTick+0x8>)
 8000266:	6818      	ldr	r0, [r3, #0]
}
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	20000dc4 	.word	0x20000dc4

08000270 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000270:	4a07      	ldr	r2, [pc, #28]	; (8000290 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000272:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000274:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000278:	041b      	lsls	r3, r3, #16
 800027a:	0c1b      	lsrs	r3, r3, #16
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000280:	0200      	lsls	r0, r0, #8
 8000282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000286:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800028a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800028c:	60d3      	str	r3, [r2, #12]
 800028e:	4770      	bx	lr
 8000290:	e000ed00 	.word	0xe000ed00

08000294 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000294:	4b17      	ldr	r3, [pc, #92]	; (80002f4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000296:	b530      	push	{r4, r5, lr}
 8000298:	68dc      	ldr	r4, [r3, #12]
 800029a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800029e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002a4:	2b04      	cmp	r3, #4
 80002a6:	bf28      	it	cs
 80002a8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002aa:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ac:	f04f 0501 	mov.w	r5, #1
 80002b0:	fa05 f303 	lsl.w	r3, r5, r3
 80002b4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002b8:	bf8c      	ite	hi
 80002ba:	3c03      	subhi	r4, #3
 80002bc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002be:	4019      	ands	r1, r3
 80002c0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002c2:	fa05 f404 	lsl.w	r4, r5, r4
 80002c6:	3c01      	subs	r4, #1
 80002c8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002ca:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	ea42 0201 	orr.w	r2, r2, r1
 80002d0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d4:	bfaf      	iteee	ge
 80002d6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002da:	f000 000f 	andlt.w	r0, r0, #15
 80002de:	4b06      	ldrlt	r3, [pc, #24]	; (80002f8 <HAL_NVIC_SetPriority+0x64>)
 80002e0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e2:	bfa5      	ittet	ge
 80002e4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002e8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ea:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ec:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002f0:	bd30      	pop	{r4, r5, pc}
 80002f2:	bf00      	nop
 80002f4:	e000ed00 	.word	0xe000ed00
 80002f8:	e000ed14 	.word	0xe000ed14

080002fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002fc:	3801      	subs	r0, #1
 80002fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000302:	d20a      	bcs.n	800031a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000306:	4a07      	ldr	r2, [pc, #28]	; (8000324 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000308:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030a:	21f0      	movs	r1, #240	; 0xf0
 800030c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000310:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000312:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000314:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800031a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	e000e010 	.word	0xe000e010
 8000324:	e000ed00 	.word	0xe000ed00

08000328 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000328:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 800032c:	2a02      	cmp	r2, #2
{  
 800032e:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000330:	d003      	beq.n	800033a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000332:	2204      	movs	r2, #4
 8000334:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000336:	2001      	movs	r0, #1
 8000338:	bd10      	pop	{r4, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800033a:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800033c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800033e:	6811      	ldr	r1, [r2, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000340:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000342:	f021 010e 	bic.w	r1, r1, #14
 8000346:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000348:	6811      	ldr	r1, [r2, #0]
 800034a:	f021 0101 	bic.w	r1, r1, #1
 800034e:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000350:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000352:	2101      	movs	r1, #1
 8000354:	fa01 f202 	lsl.w	r2, r1, r2
 8000358:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800035a:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800035c:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000360:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000364:	b113      	cbz	r3, 800036c <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 8000366:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000368:	4620      	mov	r0, r4
 800036a:	bd10      	pop	{r4, pc}
 800036c:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 800036e:	bd10      	pop	{r4, pc}

08000370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000374:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000378:	f8df 9190 	ldr.w	r9, [pc, #400]	; 800050c <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800037c:	4a61      	ldr	r2, [pc, #388]	; (8000504 <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 800037e:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000380:	fa38 f403 	lsrs.w	r4, r8, r3
 8000384:	d102      	bne.n	800038c <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000386:	b003      	add	sp, #12
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800038c:	f04f 0e01 	mov.w	lr, #1
 8000390:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000394:	ea18 060e 	ands.w	r6, r8, lr
 8000398:	f000 80a6 	beq.w	80004e8 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800039c:	684c      	ldr	r4, [r1, #4]
 800039e:	f024 0710 	bic.w	r7, r4, #16
 80003a2:	2f02      	cmp	r7, #2
 80003a4:	d116      	bne.n	80003d4 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 80003a6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80003aa:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80003ae:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80003b2:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80003b6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80003ba:	f04f 0c0f 	mov.w	ip, #15
 80003be:	fa0c fc0b 	lsl.w	ip, ip, fp
 80003c2:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80003c6:	690d      	ldr	r5, [r1, #16]
 80003c8:	fa05 f50b 	lsl.w	r5, r5, fp
 80003cc:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80003d0:	f8ca 5020 	str.w	r5, [sl, #32]
 80003d4:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003d8:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80003da:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003de:	fa05 f50a 	lsl.w	r5, r5, sl
 80003e2:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003e4:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003e8:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ec:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003f0:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003f2:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003f6:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80003f8:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003fc:	d811      	bhi.n	8000422 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80003fe:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000400:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000404:	68cf      	ldr	r7, [r1, #12]
 8000406:	fa07 fc0a 	lsl.w	ip, r7, sl
 800040a:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800040e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000410:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000412:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000416:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800041a:	409f      	lsls	r7, r3
 800041c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000420:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000422:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000424:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000426:	688f      	ldr	r7, [r1, #8]
 8000428:	fa07 f70a 	lsl.w	r7, r7, sl
 800042c:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800042e:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000430:	00e5      	lsls	r5, r4, #3
 8000432:	d559      	bpl.n	80004e8 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000434:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000438:	f045 0501 	orr.w	r5, r5, #1
 800043c:	f8c9 5018 	str.w	r5, [r9, #24]
 8000440:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000444:	f023 0703 	bic.w	r7, r3, #3
 8000448:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800044c:	f005 0501 	and.w	r5, r5, #1
 8000450:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000454:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000456:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800045c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800045e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000462:	f04f 0e0f 	mov.w	lr, #15
 8000466:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800046a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800046e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000472:	d03b      	beq.n	80004ec <HAL_GPIO_Init+0x17c>
 8000474:	4d24      	ldr	r5, [pc, #144]	; (8000508 <HAL_GPIO_Init+0x198>)
 8000476:	42a8      	cmp	r0, r5
 8000478:	d03a      	beq.n	80004f0 <HAL_GPIO_Init+0x180>
 800047a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800047e:	42a8      	cmp	r0, r5
 8000480:	d038      	beq.n	80004f4 <HAL_GPIO_Init+0x184>
 8000482:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000486:	42a8      	cmp	r0, r5
 8000488:	d036      	beq.n	80004f8 <HAL_GPIO_Init+0x188>
 800048a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800048e:	42a8      	cmp	r0, r5
 8000490:	d034      	beq.n	80004fc <HAL_GPIO_Init+0x18c>
 8000492:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000496:	42a8      	cmp	r0, r5
 8000498:	d032      	beq.n	8000500 <HAL_GPIO_Init+0x190>
 800049a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800049e:	42a8      	cmp	r0, r5
 80004a0:	bf14      	ite	ne
 80004a2:	2507      	movne	r5, #7
 80004a4:	2506      	moveq	r5, #6
 80004a6:	fa05 f50c 	lsl.w	r5, r5, ip
 80004aa:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80004ae:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80004b0:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80004b2:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004b4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80004b8:	bf0c      	ite	eq
 80004ba:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80004bc:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 80004be:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80004c0:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004c2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80004c6:	bf0c      	ite	eq
 80004c8:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80004ca:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 80004cc:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80004ce:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004d0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80004d4:	bf0c      	ite	eq
 80004d6:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80004d8:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 80004da:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80004dc:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004de:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80004e0:	bf54      	ite	pl
 80004e2:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80004e4:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 80004e6:	60d5      	str	r5, [r2, #12]
    position++;
 80004e8:	3301      	adds	r3, #1
 80004ea:	e749      	b.n	8000380 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80004ec:	2500      	movs	r5, #0
 80004ee:	e7da      	b.n	80004a6 <HAL_GPIO_Init+0x136>
 80004f0:	2501      	movs	r5, #1
 80004f2:	e7d8      	b.n	80004a6 <HAL_GPIO_Init+0x136>
 80004f4:	2502      	movs	r5, #2
 80004f6:	e7d6      	b.n	80004a6 <HAL_GPIO_Init+0x136>
 80004f8:	2503      	movs	r5, #3
 80004fa:	e7d4      	b.n	80004a6 <HAL_GPIO_Init+0x136>
 80004fc:	2504      	movs	r5, #4
 80004fe:	e7d2      	b.n	80004a6 <HAL_GPIO_Init+0x136>
 8000500:	2505      	movs	r5, #5
 8000502:	e7d0      	b.n	80004a6 <HAL_GPIO_Init+0x136>
 8000504:	40010400 	.word	0x40010400
 8000508:	48000400 	.word	0x48000400
 800050c:	40021000 	.word	0x40021000

08000510 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000510:	b10a      	cbz	r2, 8000516 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000512:	6181      	str	r1, [r0, #24]
 8000514:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000516:	6281      	str	r1, [r0, #40]	; 0x28
 8000518:	4770      	bx	lr

0800051a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800051a:	6943      	ldr	r3, [r0, #20]
 800051c:	4059      	eors	r1, r3
 800051e:	6141      	str	r1, [r0, #20]
 8000520:	4770      	bx	lr
	...

08000524 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000524:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000528:	4605      	mov	r5, r0
 800052a:	b918      	cbnz	r0, 8000534 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800052c:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 800052e:	b002      	add	sp, #8
 8000530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000534:	6803      	ldr	r3, [r0, #0]
 8000536:	07df      	lsls	r7, r3, #31
 8000538:	d411      	bmi.n	800055e <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800053a:	682b      	ldr	r3, [r5, #0]
 800053c:	079e      	lsls	r6, r3, #30
 800053e:	f100 8088 	bmi.w	8000652 <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000542:	682b      	ldr	r3, [r5, #0]
 8000544:	071c      	lsls	r4, r3, #28
 8000546:	f100 80fc 	bmi.w	8000742 <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800054a:	682b      	ldr	r3, [r5, #0]
 800054c:	0758      	lsls	r0, r3, #29
 800054e:	f100 8145 	bmi.w	80007dc <HAL_RCC_OscConfig+0x2b8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000552:	69aa      	ldr	r2, [r5, #24]
 8000554:	2a00      	cmp	r2, #0
 8000556:	f040 81dc 	bne.w	8000912 <HAL_RCC_OscConfig+0x3ee>
  return HAL_OK;
 800055a:	2000      	movs	r0, #0
 800055c:	e7e7      	b.n	800052e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800055e:	4cbd      	ldr	r4, [pc, #756]	; (8000854 <HAL_RCC_OscConfig+0x330>)
 8000560:	6863      	ldr	r3, [r4, #4]
 8000562:	f003 030c 	and.w	r3, r3, #12
 8000566:	2b04      	cmp	r3, #4
 8000568:	d00a      	beq.n	8000580 <HAL_RCC_OscConfig+0x5c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800056a:	6863      	ldr	r3, [r4, #4]
 800056c:	f003 030c 	and.w	r3, r3, #12
 8000570:	2b08      	cmp	r3, #8
 8000572:	d119      	bne.n	80005a8 <HAL_RCC_OscConfig+0x84>
 8000574:	6863      	ldr	r3, [r4, #4]
 8000576:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800057a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800057e:	d113      	bne.n	80005a8 <HAL_RCC_OscConfig+0x84>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000580:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000584:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000588:	6821      	ldr	r1, [r4, #0]
 800058a:	fa93 f3a3 	rbit	r3, r3
 800058e:	fab3 f383 	clz	r3, r3
 8000592:	f003 031f 	and.w	r3, r3, #31
 8000596:	2201      	movs	r2, #1
 8000598:	fa02 f303 	lsl.w	r3, r2, r3
 800059c:	420b      	tst	r3, r1
 800059e:	d0cc      	beq.n	800053a <HAL_RCC_OscConfig+0x16>
 80005a0:	686b      	ldr	r3, [r5, #4]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1c9      	bne.n	800053a <HAL_RCC_OscConfig+0x16>
 80005a6:	e7c1      	b.n	800052c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005a8:	686b      	ldr	r3, [r5, #4]
 80005aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005ae:	d11e      	bne.n	80005ee <HAL_RCC_OscConfig+0xca>
 80005b0:	6823      	ldr	r3, [r4, #0]
 80005b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005b6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005b8:	f7ff fe54 	bl	8000264 <HAL_GetTick>
 80005bc:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005c0:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005c2:	2701      	movs	r7, #1
 80005c4:	fa96 f3a6 	rbit	r3, r6
 80005c8:	6822      	ldr	r2, [r4, #0]
 80005ca:	fa96 f3a6 	rbit	r3, r6
 80005ce:	fab3 f383 	clz	r3, r3
 80005d2:	f003 031f 	and.w	r3, r3, #31
 80005d6:	fa07 f303 	lsl.w	r3, r7, r3
 80005da:	4213      	tst	r3, r2
 80005dc:	d1ad      	bne.n	800053a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005de:	f7ff fe41 	bl	8000264 <HAL_GetTick>
 80005e2:	eba0 0008 	sub.w	r0, r0, r8
 80005e6:	2864      	cmp	r0, #100	; 0x64
 80005e8:	d9ec      	bls.n	80005c4 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 80005ea:	2003      	movs	r0, #3
 80005ec:	e79f      	b.n	800052e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ee:	bb0b      	cbnz	r3, 8000634 <HAL_RCC_OscConfig+0x110>
 80005f0:	6823      	ldr	r3, [r4, #0]
 80005f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005f6:	6023      	str	r3, [r4, #0]
 80005f8:	6823      	ldr	r3, [r4, #0]
 80005fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005fe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000600:	f7ff fe30 	bl	8000264 <HAL_GetTick>
 8000604:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000608:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800060a:	2701      	movs	r7, #1
 800060c:	fa96 f3a6 	rbit	r3, r6
 8000610:	6822      	ldr	r2, [r4, #0]
 8000612:	fa96 f3a6 	rbit	r3, r6
 8000616:	fab3 f383 	clz	r3, r3
 800061a:	f003 031f 	and.w	r3, r3, #31
 800061e:	fa07 f303 	lsl.w	r3, r7, r3
 8000622:	4213      	tst	r3, r2
 8000624:	d089      	beq.n	800053a <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000626:	f7ff fe1d 	bl	8000264 <HAL_GetTick>
 800062a:	eba0 0008 	sub.w	r0, r0, r8
 800062e:	2864      	cmp	r0, #100	; 0x64
 8000630:	d9ec      	bls.n	800060c <HAL_RCC_OscConfig+0xe8>
 8000632:	e7da      	b.n	80005ea <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000638:	6823      	ldr	r3, [r4, #0]
 800063a:	d103      	bne.n	8000644 <HAL_RCC_OscConfig+0x120>
 800063c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000640:	6023      	str	r3, [r4, #0]
 8000642:	e7b5      	b.n	80005b0 <HAL_RCC_OscConfig+0x8c>
 8000644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000648:	6023      	str	r3, [r4, #0]
 800064a:	6823      	ldr	r3, [r4, #0]
 800064c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000650:	e7b1      	b.n	80005b6 <HAL_RCC_OscConfig+0x92>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000652:	4c80      	ldr	r4, [pc, #512]	; (8000854 <HAL_RCC_OscConfig+0x330>)
 8000654:	6863      	ldr	r3, [r4, #4]
 8000656:	f013 0f0c 	tst.w	r3, #12
 800065a:	d00a      	beq.n	8000672 <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800065c:	6863      	ldr	r3, [r4, #4]
 800065e:	f003 030c 	and.w	r3, r3, #12
 8000662:	2b08      	cmp	r3, #8
 8000664:	d125      	bne.n	80006b2 <HAL_RCC_OscConfig+0x18e>
 8000666:	6863      	ldr	r3, [r4, #4]
 8000668:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800066c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000670:	d11f      	bne.n	80006b2 <HAL_RCC_OscConfig+0x18e>
 8000672:	2302      	movs	r3, #2
 8000674:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000678:	6821      	ldr	r1, [r4, #0]
 800067a:	fa93 f3a3 	rbit	r3, r3
 800067e:	fab3 f383 	clz	r3, r3
 8000682:	f003 031f 	and.w	r3, r3, #31
 8000686:	2201      	movs	r2, #1
 8000688:	fa02 f303 	lsl.w	r3, r2, r3
 800068c:	420b      	tst	r3, r1
 800068e:	d003      	beq.n	8000698 <HAL_RCC_OscConfig+0x174>
 8000690:	68eb      	ldr	r3, [r5, #12]
 8000692:	4293      	cmp	r3, r2
 8000694:	f47f af4a 	bne.w	800052c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000698:	6821      	ldr	r1, [r4, #0]
 800069a:	23f8      	movs	r3, #248	; 0xf8
 800069c:	fa93 f3a3 	rbit	r3, r3
 80006a0:	fab3 f283 	clz	r2, r3
 80006a4:	692b      	ldr	r3, [r5, #16]
 80006a6:	4093      	lsls	r3, r2
 80006a8:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80006ac:	4313      	orrs	r3, r2
 80006ae:	6023      	str	r3, [r4, #0]
 80006b0:	e747      	b.n	8000542 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006b2:	68ea      	ldr	r2, [r5, #12]
 80006b4:	2601      	movs	r6, #1
 80006b6:	b30a      	cbz	r2, 80006fc <HAL_RCC_OscConfig+0x1d8>
 80006b8:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80006bc:	fab3 f383 	clz	r3, r3
 80006c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80006c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	2702      	movs	r7, #2
 80006cc:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80006ce:	f7ff fdc9 	bl	8000264 <HAL_GetTick>
 80006d2:	4680      	mov	r8, r0
 80006d4:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006d8:	6822      	ldr	r2, [r4, #0]
 80006da:	fa97 f3a7 	rbit	r3, r7
 80006de:	fab3 f383 	clz	r3, r3
 80006e2:	f003 031f 	and.w	r3, r3, #31
 80006e6:	fa06 f303 	lsl.w	r3, r6, r3
 80006ea:	4213      	tst	r3, r2
 80006ec:	d1d4      	bne.n	8000698 <HAL_RCC_OscConfig+0x174>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006ee:	f7ff fdb9 	bl	8000264 <HAL_GetTick>
 80006f2:	eba0 0008 	sub.w	r0, r0, r8
 80006f6:	2802      	cmp	r0, #2
 80006f8:	d9ec      	bls.n	80006d4 <HAL_RCC_OscConfig+0x1b0>
 80006fa:	e776      	b.n	80005ea <HAL_RCC_OscConfig+0xc6>
 80006fc:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000700:	fab3 f383 	clz	r3, r3
 8000704:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000708:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	2702      	movs	r7, #2
 8000710:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000712:	f7ff fda7 	bl	8000264 <HAL_GetTick>
 8000716:	4680      	mov	r8, r0
 8000718:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800071c:	6822      	ldr	r2, [r4, #0]
 800071e:	fa97 f3a7 	rbit	r3, r7
 8000722:	fab3 f383 	clz	r3, r3
 8000726:	f003 031f 	and.w	r3, r3, #31
 800072a:	fa06 f303 	lsl.w	r3, r6, r3
 800072e:	4213      	tst	r3, r2
 8000730:	f43f af07 	beq.w	8000542 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000734:	f7ff fd96 	bl	8000264 <HAL_GetTick>
 8000738:	eba0 0008 	sub.w	r0, r0, r8
 800073c:	2802      	cmp	r0, #2
 800073e:	d9eb      	bls.n	8000718 <HAL_RCC_OscConfig+0x1f4>
 8000740:	e753      	b.n	80005ea <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000742:	696a      	ldr	r2, [r5, #20]
 8000744:	4e43      	ldr	r6, [pc, #268]	; (8000854 <HAL_RCC_OscConfig+0x330>)
 8000746:	4944      	ldr	r1, [pc, #272]	; (8000858 <HAL_RCC_OscConfig+0x334>)
 8000748:	2401      	movs	r4, #1
 800074a:	b31a      	cbz	r2, 8000794 <HAL_RCC_OscConfig+0x270>
 800074c:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000750:	fab3 f383 	clz	r3, r3
 8000754:	440b      	add	r3, r1
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	2702      	movs	r7, #2
 800075a:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 800075c:	f7ff fd82 	bl	8000264 <HAL_GetTick>
 8000760:	4680      	mov	r8, r0
 8000762:	fa97 f3a7 	rbit	r3, r7
 8000766:	fa97 f3a7 	rbit	r3, r7
 800076a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800076e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000770:	fa97 f3a7 	rbit	r3, r7
 8000774:	fab3 f383 	clz	r3, r3
 8000778:	f003 031f 	and.w	r3, r3, #31
 800077c:	fa04 f303 	lsl.w	r3, r4, r3
 8000780:	4213      	tst	r3, r2
 8000782:	f47f aee2 	bne.w	800054a <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000786:	f7ff fd6d 	bl	8000264 <HAL_GetTick>
 800078a:	eba0 0008 	sub.w	r0, r0, r8
 800078e:	2802      	cmp	r0, #2
 8000790:	d9e7      	bls.n	8000762 <HAL_RCC_OscConfig+0x23e>
 8000792:	e72a      	b.n	80005ea <HAL_RCC_OscConfig+0xc6>
 8000794:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000798:	fab3 f383 	clz	r3, r3
 800079c:	440b      	add	r3, r1
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	2702      	movs	r7, #2
 80007a2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80007a4:	f7ff fd5e 	bl	8000264 <HAL_GetTick>
 80007a8:	4680      	mov	r8, r0
 80007aa:	fa97 f3a7 	rbit	r3, r7
 80007ae:	fa97 f3a7 	rbit	r3, r7
 80007b2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007b6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80007b8:	fa97 f3a7 	rbit	r3, r7
 80007bc:	fab3 f383 	clz	r3, r3
 80007c0:	f003 031f 	and.w	r3, r3, #31
 80007c4:	fa04 f303 	lsl.w	r3, r4, r3
 80007c8:	4213      	tst	r3, r2
 80007ca:	f43f aebe 	beq.w	800054a <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007ce:	f7ff fd49 	bl	8000264 <HAL_GetTick>
 80007d2:	eba0 0008 	sub.w	r0, r0, r8
 80007d6:	2802      	cmp	r0, #2
 80007d8:	d9e7      	bls.n	80007aa <HAL_RCC_OscConfig+0x286>
 80007da:	e706      	b.n	80005ea <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007dc:	4c1d      	ldr	r4, [pc, #116]	; (8000854 <HAL_RCC_OscConfig+0x330>)
 80007de:	69e3      	ldr	r3, [r4, #28]
 80007e0:	00d9      	lsls	r1, r3, #3
 80007e2:	d434      	bmi.n	800084e <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80007e4:	69e3      	ldr	r3, [r4, #28]
 80007e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ea:	61e3      	str	r3, [r4, #28]
 80007ec:	69e3      	ldr	r3, [r4, #28]
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80007f6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007f8:	4f18      	ldr	r7, [pc, #96]	; (800085c <HAL_RCC_OscConfig+0x338>)
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	05da      	lsls	r2, r3, #23
 80007fe:	d52f      	bpl.n	8000860 <HAL_RCC_OscConfig+0x33c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000800:	68ab      	ldr	r3, [r5, #8]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d13d      	bne.n	8000882 <HAL_RCC_OscConfig+0x35e>
 8000806:	6a23      	ldr	r3, [r4, #32]
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800080e:	f7ff fd29 	bl	8000264 <HAL_GetTick>
 8000812:	2702      	movs	r7, #2
 8000814:	4682      	mov	sl, r0
 8000816:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000818:	f04f 0801 	mov.w	r8, #1
 800081c:	fa97 f3a7 	rbit	r3, r7
 8000820:	fa97 f3a7 	rbit	r3, r7
 8000824:	2b00      	cmp	r3, #0
 8000826:	d06c      	beq.n	8000902 <HAL_RCC_OscConfig+0x3de>
 8000828:	6a22      	ldr	r2, [r4, #32]
 800082a:	fa99 f3a9 	rbit	r3, r9
 800082e:	fab3 f383 	clz	r3, r3
 8000832:	f003 031f 	and.w	r3, r3, #31
 8000836:	fa08 f303 	lsl.w	r3, r8, r3
 800083a:	4213      	tst	r3, r2
 800083c:	d058      	beq.n	80008f0 <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 800083e:	2e00      	cmp	r6, #0
 8000840:	f43f ae87 	beq.w	8000552 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000844:	69e3      	ldr	r3, [r4, #28]
 8000846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800084a:	61e3      	str	r3, [r4, #28]
 800084c:	e681      	b.n	8000552 <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 800084e:	2600      	movs	r6, #0
 8000850:	e7d2      	b.n	80007f8 <HAL_RCC_OscConfig+0x2d4>
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000
 8000858:	10908120 	.word	0x10908120
 800085c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000866:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000868:	f7ff fcfc 	bl	8000264 <HAL_GetTick>
 800086c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	d4c5      	bmi.n	8000800 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000874:	f7ff fcf6 	bl	8000264 <HAL_GetTick>
 8000878:	eba0 0008 	sub.w	r0, r0, r8
 800087c:	2864      	cmp	r0, #100	; 0x64
 800087e:	d9f6      	bls.n	800086e <HAL_RCC_OscConfig+0x34a>
 8000880:	e6b3      	b.n	80005ea <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000882:	bb3b      	cbnz	r3, 80008d4 <HAL_RCC_OscConfig+0x3b0>
 8000884:	6a23      	ldr	r3, [r4, #32]
 8000886:	f023 0301 	bic.w	r3, r3, #1
 800088a:	6223      	str	r3, [r4, #32]
 800088c:	6a23      	ldr	r3, [r4, #32]
 800088e:	f023 0304 	bic.w	r3, r3, #4
 8000892:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000894:	f7ff fce6 	bl	8000264 <HAL_GetTick>
 8000898:	2702      	movs	r7, #2
 800089a:	4682      	mov	sl, r0
 800089c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800089e:	f04f 0801 	mov.w	r8, #1
 80008a2:	fa97 f3a7 	rbit	r3, r7
 80008a6:	fa97 f3a7 	rbit	r3, r7
 80008aa:	b373      	cbz	r3, 800090a <HAL_RCC_OscConfig+0x3e6>
 80008ac:	6a22      	ldr	r2, [r4, #32]
 80008ae:	fa99 f3a9 	rbit	r3, r9
 80008b2:	fab3 f383 	clz	r3, r3
 80008b6:	f003 031f 	and.w	r3, r3, #31
 80008ba:	fa08 f303 	lsl.w	r3, r8, r3
 80008be:	4213      	tst	r3, r2
 80008c0:	d0bd      	beq.n	800083e <HAL_RCC_OscConfig+0x31a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008c2:	f7ff fccf 	bl	8000264 <HAL_GetTick>
 80008c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80008ca:	eba0 000a 	sub.w	r0, r0, sl
 80008ce:	4298      	cmp	r0, r3
 80008d0:	d9e7      	bls.n	80008a2 <HAL_RCC_OscConfig+0x37e>
 80008d2:	e68a      	b.n	80005ea <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008d4:	2b05      	cmp	r3, #5
 80008d6:	6a23      	ldr	r3, [r4, #32]
 80008d8:	d103      	bne.n	80008e2 <HAL_RCC_OscConfig+0x3be>
 80008da:	f043 0304 	orr.w	r3, r3, #4
 80008de:	6223      	str	r3, [r4, #32]
 80008e0:	e791      	b.n	8000806 <HAL_RCC_OscConfig+0x2e2>
 80008e2:	f023 0301 	bic.w	r3, r3, #1
 80008e6:	6223      	str	r3, [r4, #32]
 80008e8:	6a23      	ldr	r3, [r4, #32]
 80008ea:	f023 0304 	bic.w	r3, r3, #4
 80008ee:	e78d      	b.n	800080c <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008f0:	f7ff fcb8 	bl	8000264 <HAL_GetTick>
 80008f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80008f8:	eba0 000a 	sub.w	r0, r0, sl
 80008fc:	4298      	cmp	r0, r3
 80008fe:	d98d      	bls.n	800081c <HAL_RCC_OscConfig+0x2f8>
 8000900:	e673      	b.n	80005ea <HAL_RCC_OscConfig+0xc6>
 8000902:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000906:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000908:	e78f      	b.n	800082a <HAL_RCC_OscConfig+0x306>
 800090a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800090e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000910:	e7cd      	b.n	80008ae <HAL_RCC_OscConfig+0x38a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000912:	4c44      	ldr	r4, [pc, #272]	; (8000a24 <HAL_RCC_OscConfig+0x500>)
 8000914:	6863      	ldr	r3, [r4, #4]
 8000916:	f003 030c 	and.w	r3, r3, #12
 800091a:	2b08      	cmp	r3, #8
 800091c:	f43f ae06 	beq.w	800052c <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000920:	2a02      	cmp	r2, #2
 8000922:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000926:	d158      	bne.n	80009da <HAL_RCC_OscConfig+0x4b6>
 8000928:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800092c:	fab3 f383 	clz	r3, r3
 8000930:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000934:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800093e:	f7ff fc91 	bl	8000264 <HAL_GetTick>
 8000942:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000946:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000948:	2601      	movs	r6, #1
 800094a:	fa97 f3a7 	rbit	r3, r7
 800094e:	6822      	ldr	r2, [r4, #0]
 8000950:	fa97 f3a7 	rbit	r3, r7
 8000954:	fab3 f383 	clz	r3, r3
 8000958:	f003 031f 	and.w	r3, r3, #31
 800095c:	fa06 f303 	lsl.w	r3, r6, r3
 8000960:	4213      	tst	r3, r2
 8000962:	d133      	bne.n	80009cc <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000964:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000966:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000968:	f023 030f 	bic.w	r3, r3, #15
 800096c:	4313      	orrs	r3, r2
 800096e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000970:	6862      	ldr	r2, [r4, #4]
 8000972:	6a2b      	ldr	r3, [r5, #32]
 8000974:	69e9      	ldr	r1, [r5, #28]
 8000976:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 800097a:	430b      	orrs	r3, r1
 800097c:	4313      	orrs	r3, r2
 800097e:	6063      	str	r3, [r4, #4]
 8000980:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000984:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000988:	fab3 f383 	clz	r3, r3
 800098c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000990:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800099a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800099c:	f7ff fc62 	bl	8000264 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009a0:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 80009a2:	4607      	mov	r7, r0
 80009a4:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009a8:	6822      	ldr	r2, [r4, #0]
 80009aa:	fa95 f3a5 	rbit	r3, r5
 80009ae:	fab3 f383 	clz	r3, r3
 80009b2:	f003 031f 	and.w	r3, r3, #31
 80009b6:	fa06 f303 	lsl.w	r3, r6, r3
 80009ba:	4213      	tst	r3, r2
 80009bc:	f47f adcd 	bne.w	800055a <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009c0:	f7ff fc50 	bl	8000264 <HAL_GetTick>
 80009c4:	1bc0      	subs	r0, r0, r7
 80009c6:	2802      	cmp	r0, #2
 80009c8:	d9ec      	bls.n	80009a4 <HAL_RCC_OscConfig+0x480>
 80009ca:	e60e      	b.n	80005ea <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009cc:	f7ff fc4a 	bl	8000264 <HAL_GetTick>
 80009d0:	eba0 0008 	sub.w	r0, r0, r8
 80009d4:	2802      	cmp	r0, #2
 80009d6:	d9b8      	bls.n	800094a <HAL_RCC_OscConfig+0x426>
 80009d8:	e607      	b.n	80005ea <HAL_RCC_OscConfig+0xc6>
 80009da:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80009de:	fab3 f383 	clz	r3, r3
 80009e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009f0:	f7ff fc38 	bl	8000264 <HAL_GetTick>
 80009f4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80009f8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009fa:	2601      	movs	r6, #1
 80009fc:	fa95 f3a5 	rbit	r3, r5
 8000a00:	6822      	ldr	r2, [r4, #0]
 8000a02:	fa95 f3a5 	rbit	r3, r5
 8000a06:	fab3 f383 	clz	r3, r3
 8000a0a:	f003 031f 	and.w	r3, r3, #31
 8000a0e:	fa06 f303 	lsl.w	r3, r6, r3
 8000a12:	4213      	tst	r3, r2
 8000a14:	f43f ada1 	beq.w	800055a <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a18:	f7ff fc24 	bl	8000264 <HAL_GetTick>
 8000a1c:	1bc0      	subs	r0, r0, r7
 8000a1e:	2802      	cmp	r0, #2
 8000a20:	d9ec      	bls.n	80009fc <HAL_RCC_OscConfig+0x4d8>
 8000a22:	e5e2      	b.n	80005ea <HAL_RCC_OscConfig+0xc6>
 8000a24:	40021000 	.word	0x40021000

08000a28 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000a28:	4911      	ldr	r1, [pc, #68]	; (8000a70 <HAL_RCC_GetSysClockFreq+0x48>)
 8000a2a:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000a2c:	f003 020c 	and.w	r2, r3, #12
 8000a30:	2a08      	cmp	r2, #8
 8000a32:	d11a      	bne.n	8000a6a <HAL_RCC_GetSysClockFreq+0x42>
 8000a34:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000a38:	fa92 f2a2 	rbit	r2, r2
 8000a3c:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a3e:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a42:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000a44:	fa90 f0a0 	rbit	r0, r0
 8000a48:	fab0 f080 	clz	r0, r0
 8000a4c:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a50:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000a54:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a56:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a58:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a5a:	4807      	ldr	r0, [pc, #28]	; (8000a78 <HAL_RCC_GetSysClockFreq+0x50>)
 8000a5c:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000a5e:	4807      	ldr	r0, [pc, #28]	; (8000a7c <HAL_RCC_GetSysClockFreq+0x54>)
 8000a60:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a64:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000a66:	4348      	muls	r0, r1
 8000a68:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000a6a:	4804      	ldr	r0, [pc, #16]	; (8000a7c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40021000 	.word	0x40021000
 8000a74:	0800272c 	.word	0x0800272c
 8000a78:	0800273c 	.word	0x0800273c
 8000a7c:	007a1200 	.word	0x007a1200

08000a80 <HAL_RCC_ClockConfig>:
{
 8000a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a84:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000a86:	4604      	mov	r4, r0
 8000a88:	b910      	cbnz	r0, 8000a90 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000a90:	4a4c      	ldr	r2, [pc, #304]	; (8000bc4 <HAL_RCC_ClockConfig+0x144>)
 8000a92:	6813      	ldr	r3, [r2, #0]
 8000a94:	f003 0307 	and.w	r3, r3, #7
 8000a98:	428b      	cmp	r3, r1
 8000a9a:	d32e      	bcc.n	8000afa <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a9c:	6822      	ldr	r2, [r4, #0]
 8000a9e:	0791      	lsls	r1, r2, #30
 8000aa0:	d436      	bmi.n	8000b10 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000aa2:	07d2      	lsls	r2, r2, #31
 8000aa4:	d43c      	bmi.n	8000b20 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000aa6:	4a47      	ldr	r2, [pc, #284]	; (8000bc4 <HAL_RCC_ClockConfig+0x144>)
 8000aa8:	6813      	ldr	r3, [r2, #0]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	429d      	cmp	r5, r3
 8000ab0:	d375      	bcc.n	8000b9e <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ab2:	6822      	ldr	r2, [r4, #0]
 8000ab4:	4d44      	ldr	r5, [pc, #272]	; (8000bc8 <HAL_RCC_ClockConfig+0x148>)
 8000ab6:	f012 0f04 	tst.w	r2, #4
 8000aba:	d17c      	bne.n	8000bb6 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000abc:	0713      	lsls	r3, r2, #28
 8000abe:	d506      	bpl.n	8000ace <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ac0:	686b      	ldr	r3, [r5, #4]
 8000ac2:	6922      	ldr	r2, [r4, #16]
 8000ac4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000ac8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000acc:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000ace:	f7ff ffab 	bl	8000a28 <HAL_RCC_GetSysClockFreq>
 8000ad2:	686b      	ldr	r3, [r5, #4]
 8000ad4:	22f0      	movs	r2, #240	; 0xf0
 8000ad6:	fa92 f2a2 	rbit	r2, r2
 8000ada:	fab2 f282 	clz	r2, r2
 8000ade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ae2:	40d3      	lsrs	r3, r2
 8000ae4:	4a39      	ldr	r2, [pc, #228]	; (8000bcc <HAL_RCC_ClockConfig+0x14c>)
 8000ae6:	5cd3      	ldrb	r3, [r2, r3]
 8000ae8:	40d8      	lsrs	r0, r3
 8000aea:	4b39      	ldr	r3, [pc, #228]	; (8000bd0 <HAL_RCC_ClockConfig+0x150>)
 8000aec:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000aee:	200f      	movs	r0, #15
 8000af0:	f7ff fb76 	bl	80001e0 <HAL_InitTick>
  return HAL_OK;
 8000af4:	2000      	movs	r0, #0
 8000af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000afa:	6813      	ldr	r3, [r2, #0]
 8000afc:	f023 0307 	bic.w	r3, r3, #7
 8000b00:	430b      	orrs	r3, r1
 8000b02:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b04:	6813      	ldr	r3, [r2, #0]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	4299      	cmp	r1, r3
 8000b0c:	d1bd      	bne.n	8000a8a <HAL_RCC_ClockConfig+0xa>
 8000b0e:	e7c5      	b.n	8000a9c <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b10:	492d      	ldr	r1, [pc, #180]	; (8000bc8 <HAL_RCC_ClockConfig+0x148>)
 8000b12:	68a0      	ldr	r0, [r4, #8]
 8000b14:	684b      	ldr	r3, [r1, #4]
 8000b16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b1a:	4303      	orrs	r3, r0
 8000b1c:	604b      	str	r3, [r1, #4]
 8000b1e:	e7c0      	b.n	8000aa2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b20:	6862      	ldr	r2, [r4, #4]
 8000b22:	4e29      	ldr	r6, [pc, #164]	; (8000bc8 <HAL_RCC_ClockConfig+0x148>)
 8000b24:	2a01      	cmp	r2, #1
 8000b26:	d127      	bne.n	8000b78 <HAL_RCC_ClockConfig+0xf8>
 8000b28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b2c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b30:	6831      	ldr	r1, [r6, #0]
 8000b32:	fa93 f3a3 	rbit	r3, r3
 8000b36:	fab3 f383 	clz	r3, r3
 8000b3a:	f003 031f 	and.w	r3, r3, #31
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b44:	d0a1      	beq.n	8000a8a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b46:	6873      	ldr	r3, [r6, #4]
 8000b48:	f023 0303 	bic.w	r3, r3, #3
 8000b4c:	431a      	orrs	r2, r3
 8000b4e:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8000b50:	f7ff fb88 	bl	8000264 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b54:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000b58:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000b5a:	6873      	ldr	r3, [r6, #4]
 8000b5c:	6862      	ldr	r2, [r4, #4]
 8000b5e:	f003 030c 	and.w	r3, r3, #12
 8000b62:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000b66:	d09e      	beq.n	8000aa6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b68:	f7ff fb7c 	bl	8000264 <HAL_GetTick>
 8000b6c:	1bc0      	subs	r0, r0, r7
 8000b6e:	4540      	cmp	r0, r8
 8000b70:	d9f3      	bls.n	8000b5a <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8000b72:	2003      	movs	r0, #3
}
 8000b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b78:	2a02      	cmp	r2, #2
 8000b7a:	bf0c      	ite	eq
 8000b7c:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000b80:	2302      	movne	r3, #2
 8000b82:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b86:	6830      	ldr	r0, [r6, #0]
 8000b88:	fa93 f3a3 	rbit	r3, r3
 8000b8c:	fab3 f383 	clz	r3, r3
 8000b90:	f003 031f 	and.w	r3, r3, #31
 8000b94:	2101      	movs	r1, #1
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	4203      	tst	r3, r0
 8000b9c:	e7d2      	b.n	8000b44 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b9e:	6813      	ldr	r3, [r2, #0]
 8000ba0:	f023 0307 	bic.w	r3, r3, #7
 8000ba4:	432b      	orrs	r3, r5
 8000ba6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ba8:	6813      	ldr	r3, [r2, #0]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	429d      	cmp	r5, r3
 8000bb0:	f47f af6b 	bne.w	8000a8a <HAL_RCC_ClockConfig+0xa>
 8000bb4:	e77d      	b.n	8000ab2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000bb6:	686b      	ldr	r3, [r5, #4]
 8000bb8:	68e1      	ldr	r1, [r4, #12]
 8000bba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bbe:	430b      	orrs	r3, r1
 8000bc0:	606b      	str	r3, [r5, #4]
 8000bc2:	e77b      	b.n	8000abc <HAL_RCC_ClockConfig+0x3c>
 8000bc4:	40022000 	.word	0x40022000
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	08002778 	.word	0x08002778
 8000bd0:	20000058 	.word	0x20000058

08000bd4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000bd6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	fa92 f2a2 	rbit	r2, r2
 8000be0:	fab2 f282 	clz	r2, r2
 8000be4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000be8:	40d3      	lsrs	r3, r2
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8000bec:	5cd3      	ldrb	r3, [r2, r3]
 8000bee:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000bf0:	6810      	ldr	r0, [r2, #0]
}    
 8000bf2:	40d8      	lsrs	r0, r3
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	08002788 	.word	0x08002788
 8000c00:	20000058 	.word	0x20000058

08000c04 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000c06:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	fa92 f2a2 	rbit	r2, r2
 8000c10:	fab2 f282 	clz	r2, r2
 8000c14:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000c18:	40d3      	lsrs	r3, r2
 8000c1a:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8000c1c:	5cd3      	ldrb	r3, [r2, r3]
 8000c1e:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000c20:	6810      	ldr	r0, [r2, #0]
} 
 8000c22:	40d8      	lsrs	r0, r3
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	08002788 	.word	0x08002788
 8000c30:	20000058 	.word	0x20000058

08000c34 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000c34:	6803      	ldr	r3, [r0, #0]
{
 8000c36:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000c3a:	03df      	lsls	r7, r3, #15
{
 8000c3c:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000c3e:	d523      	bpl.n	8000c88 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c40:	4d9b      	ldr	r5, [pc, #620]	; (8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000c42:	69eb      	ldr	r3, [r5, #28]
 8000c44:	00de      	lsls	r6, r3, #3
 8000c46:	f100 80d7 	bmi.w	8000df8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	69eb      	ldr	r3, [r5, #28]
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	61eb      	str	r3, [r5, #28]
 8000c52:	69eb      	ldr	r3, [r5, #28]
 8000c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c58:	9301      	str	r3, [sp, #4]
 8000c5a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c5c:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c5e:	4f95      	ldr	r7, [pc, #596]	; (8000eb4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	05d8      	lsls	r0, r3, #23
 8000c64:	f140 80ca 	bpl.w	8000dfc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000c68:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c6a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000c6e:	f040 80da 	bne.w	8000e26 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000c72:	6a2b      	ldr	r3, [r5, #32]
 8000c74:	6862      	ldr	r2, [r4, #4]
 8000c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c7e:	b11e      	cbz	r6, 8000c88 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c80:	69eb      	ldr	r3, [r5, #28]
 8000c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c86:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000c88:	6820      	ldr	r0, [r4, #0]
 8000c8a:	07c3      	lsls	r3, r0, #31
 8000c8c:	d506      	bpl.n	8000c9c <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000c8e:	4a88      	ldr	r2, [pc, #544]	; (8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000c90:	68a1      	ldr	r1, [r4, #8]
 8000c92:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c94:	f023 0303 	bic.w	r3, r3, #3
 8000c98:	430b      	orrs	r3, r1
 8000c9a:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000c9c:	0787      	lsls	r7, r0, #30
 8000c9e:	d506      	bpl.n	8000cae <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000ca0:	4a83      	ldr	r2, [pc, #524]	; (8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000ca2:	68e1      	ldr	r1, [r4, #12]
 8000ca4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ca6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000caa:	430b      	orrs	r3, r1
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8000cae:	0746      	lsls	r6, r0, #29
 8000cb0:	d506      	bpl.n	8000cc0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8000cb2:	4a7f      	ldr	r2, [pc, #508]	; (8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000cb4:	6921      	ldr	r1, [r4, #16]
 8000cb6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cb8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000cbc:	430b      	orrs	r3, r1
 8000cbe:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000cc0:	0685      	lsls	r5, r0, #26
 8000cc2:	d506      	bpl.n	8000cd2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000cc4:	4a7a      	ldr	r2, [pc, #488]	; (8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000cc6:	69e1      	ldr	r1, [r4, #28]
 8000cc8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cca:	f023 0310 	bic.w	r3, r3, #16
 8000cce:	430b      	orrs	r3, r1
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000cd2:	0381      	lsls	r1, r0, #14
 8000cd4:	d506      	bpl.n	8000ce4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8000cd6:	4a76      	ldr	r2, [pc, #472]	; (8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000cd8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000cda:	6853      	ldr	r3, [r2, #4]
 8000cdc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000ce0:	430b      	orrs	r3, r1
 8000ce2:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8000ce4:	0642      	lsls	r2, r0, #25
 8000ce6:	d506      	bpl.n	8000cf6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8000ce8:	4a71      	ldr	r2, [pc, #452]	; (8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000cea:	6a21      	ldr	r1, [r4, #32]
 8000cec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cee:	f023 0320 	bic.w	r3, r3, #32
 8000cf2:	430b      	orrs	r3, r1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000cf6:	0343      	lsls	r3, r0, #13
 8000cf8:	d506      	bpl.n	8000d08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000cfa:	4a6d      	ldr	r2, [pc, #436]	; (8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000cfc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000cfe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d04:	430b      	orrs	r3, r1
 8000d06:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8000d08:	0707      	lsls	r7, r0, #28
 8000d0a:	d506      	bpl.n	8000d1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8000d0c:	4a68      	ldr	r2, [pc, #416]	; (8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d0e:	6961      	ldr	r1, [r4, #20]
 8000d10:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d12:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000d16:	430b      	orrs	r3, r1
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8000d1a:	06c6      	lsls	r6, r0, #27
 8000d1c:	d506      	bpl.n	8000d2c <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8000d1e:	4a64      	ldr	r2, [pc, #400]	; (8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d20:	69a1      	ldr	r1, [r4, #24]
 8000d22:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d24:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000d28:	430b      	orrs	r3, r1
 8000d2a:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8000d2c:	0585      	lsls	r5, r0, #22
 8000d2e:	d506      	bpl.n	8000d3e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000d30:	4a5f      	ldr	r2, [pc, #380]	; (8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d32:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000d34:	6853      	ldr	r3, [r2, #4]
 8000d36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000d3a:	430b      	orrs	r3, r1
 8000d3c:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8000d3e:	0601      	lsls	r1, r0, #24
 8000d40:	d506      	bpl.n	8000d50 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8000d42:	4a5b      	ldr	r2, [pc, #364]	; (8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d44:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000d46:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000d48:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000d4c:	430b      	orrs	r3, r1
 8000d4e:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8000d50:	05c2      	lsls	r2, r0, #23
 8000d52:	d506      	bpl.n	8000d62 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8000d54:	4a56      	ldr	r2, [pc, #344]	; (8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d56:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000d58:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000d5a:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8000d5e:	430b      	orrs	r3, r1
 8000d60:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8000d62:	04c3      	lsls	r3, r0, #19
 8000d64:	d506      	bpl.n	8000d74 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8000d66:	4a52      	ldr	r2, [pc, #328]	; (8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d6a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d70:	430b      	orrs	r3, r1
 8000d72:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8000d74:	0487      	lsls	r7, r0, #18
 8000d76:	d506      	bpl.n	8000d86 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8000d78:	4a4d      	ldr	r2, [pc, #308]	; (8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000d7c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d7e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000d82:	430b      	orrs	r3, r1
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8000d86:	02c6      	lsls	r6, r0, #11
 8000d88:	d506      	bpl.n	8000d98 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8000d8a:	4a49      	ldr	r2, [pc, #292]	; (8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d8c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000d8e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d94:	430b      	orrs	r3, r1
 8000d96:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8000d98:	0285      	lsls	r5, r0, #10
 8000d9a:	d506      	bpl.n	8000daa <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8000d9c:	4a44      	ldr	r2, [pc, #272]	; (8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d9e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000da0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000da2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000da6:	430b      	orrs	r3, r1
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8000daa:	0241      	lsls	r1, r0, #9
 8000dac:	d506      	bpl.n	8000dbc <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8000dae:	4a40      	ldr	r2, [pc, #256]	; (8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000db0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000db2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000db4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000db8:	430b      	orrs	r3, r1
 8000dba:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8000dbc:	0202      	lsls	r2, r0, #8
 8000dbe:	d506      	bpl.n	8000dce <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8000dc0:	4a3b      	ldr	r2, [pc, #236]	; (8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000dc2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000dc4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000dca:	430b      	orrs	r3, r1
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8000dce:	01c3      	lsls	r3, r0, #7
 8000dd0:	d506      	bpl.n	8000de0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8000dd2:	4a37      	ldr	r2, [pc, #220]	; (8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000dd4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8000dd6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ddc:	430b      	orrs	r3, r1
 8000dde:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8000de0:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8000de4:	d01c      	beq.n	8000e20 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8000de6:	4a32      	ldr	r2, [pc, #200]	; (8000eb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000de8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000dea:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000df0:	430b      	orrs	r3, r1
 8000df2:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8000df4:	2000      	movs	r0, #0
 8000df6:	e013      	b.n	8000e20 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e730      	b.n	8000c5e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e02:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000e04:	f7ff fa2e 	bl	8000264 <HAL_GetTick>
 8000e08:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	05d9      	lsls	r1, r3, #23
 8000e0e:	f53f af2b 	bmi.w	8000c68 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e12:	f7ff fa27 	bl	8000264 <HAL_GetTick>
 8000e16:	eba0 0008 	sub.w	r0, r0, r8
 8000e1a:	2864      	cmp	r0, #100	; 0x64
 8000e1c:	d9f5      	bls.n	8000e0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 8000e1e:	2003      	movs	r0, #3
}
 8000e20:	b002      	add	sp, #8
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000e26:	6862      	ldr	r2, [r4, #4]
 8000e28:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	f43f af20 	beq.w	8000c72 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000e32:	6a29      	ldr	r1, [r5, #32]
 8000e34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e38:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8000e3c:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8000e40:	f8df e074 	ldr.w	lr, [pc, #116]	; 8000eb8 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8000e44:	fab2 f282 	clz	r2, r2
 8000e48:	4472      	add	r2, lr
 8000e4a:	0092      	lsls	r2, r2, #2
 8000e4c:	2701      	movs	r7, #1
 8000e4e:	6017      	str	r7, [r2, #0]
 8000e50:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000e54:	fab3 f383 	clz	r3, r3
 8000e58:	4473      	add	r3, lr
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000e60:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8000e62:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000e64:	f57f af05 	bpl.w	8000c72 <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8000e68:	f7ff f9fc 	bl	8000264 <HAL_GetTick>
 8000e6c:	f04f 0802 	mov.w	r8, #2
 8000e70:	4682      	mov	sl, r0
 8000e72:	46c1      	mov	r9, r8
 8000e74:	fa98 f3a8 	rbit	r3, r8
 8000e78:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e7c:	b1a3      	cbz	r3, 8000ea8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8000e7e:	6a2a      	ldr	r2, [r5, #32]
 8000e80:	fa99 f3a9 	rbit	r3, r9
 8000e84:	fab3 f383 	clz	r3, r3
 8000e88:	f003 031f 	and.w	r3, r3, #31
 8000e8c:	fa07 f303 	lsl.w	r3, r7, r3
 8000e90:	4213      	tst	r3, r2
 8000e92:	f47f aeee 	bne.w	8000c72 <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e96:	f7ff f9e5 	bl	8000264 <HAL_GetTick>
 8000e9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e9e:	eba0 000a 	sub.w	r0, r0, sl
 8000ea2:	4298      	cmp	r0, r3
 8000ea4:	d9e6      	bls.n	8000e74 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8000ea6:	e7ba      	b.n	8000e1e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8000ea8:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eac:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000eae:	e7e7      	b.n	8000e80 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40007000 	.word	0x40007000
 8000eb8:	10908100 	.word	0x10908100

08000ebc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000ebc:	6803      	ldr	r3, [r0, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000ec4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	f022 0201 	bic.w	r2, r2, #1
 8000ecc:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000ece:	2320      	movs	r3, #32
 8000ed0:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8000ed4:	4770      	bx	lr

08000ed6 <HAL_UART_TxCpltCallback>:
 8000ed6:	4770      	bx	lr

08000ed8 <HAL_UART_RxCpltCallback>:
 8000ed8:	4770      	bx	lr

08000eda <HAL_UART_ErrorCallback>:
 8000eda:	4770      	bx	lr

08000edc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8000edc:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8000ede:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8000ee6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8000eea:	f7ff fff6 	bl	8000eda <HAL_UART_ErrorCallback>
 8000eee:	bd08      	pop	{r3, pc}

08000ef0 <UART_SetConfig>:
{
 8000ef0:	b538      	push	{r3, r4, r5, lr}
 8000ef2:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ef4:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000ef6:	6921      	ldr	r1, [r4, #16]
 8000ef8:	68a2      	ldr	r2, [r4, #8]
 8000efa:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000efc:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000efe:	430a      	orrs	r2, r1
 8000f00:	6961      	ldr	r1, [r4, #20]
 8000f02:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000f04:	4977      	ldr	r1, [pc, #476]	; (80010e4 <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000f06:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000f08:	4001      	ands	r1, r0
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f0e:	686a      	ldr	r2, [r5, #4]
 8000f10:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000f12:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f14:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000f1c:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000f1e:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000f20:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000f24:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000f26:	430a      	orrs	r2, r1
 8000f28:	60aa      	str	r2, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f2a:	4a6f      	ldr	r2, [pc, #444]	; (80010e8 <UART_SetConfig+0x1f8>)
 8000f2c:	4295      	cmp	r5, r2
 8000f2e:	d112      	bne.n	8000f56 <UART_SetConfig+0x66>
 8000f30:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8000f34:	496d      	ldr	r1, [pc, #436]	; (80010ec <UART_SetConfig+0x1fc>)
 8000f36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000f38:	f002 0203 	and.w	r2, r2, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f40:	5c8a      	ldrb	r2, [r1, r2]
 8000f42:	d066      	beq.n	8001012 <UART_SetConfig+0x122>
    switch (clocksource)
 8000f44:	2a08      	cmp	r2, #8
 8000f46:	d819      	bhi.n	8000f7c <UART_SetConfig+0x8c>
 8000f48:	e8df f002 	tbb	[pc, r2]
 8000f4c:	189e92c2 	.word	0x189e92c2
 8000f50:	181818a9 	.word	0x181818a9
 8000f54:	ac          	.byte	0xac
 8000f55:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f56:	4a66      	ldr	r2, [pc, #408]	; (80010f0 <UART_SetConfig+0x200>)
 8000f58:	4295      	cmp	r5, r2
 8000f5a:	d124      	bne.n	8000fa6 <UART_SetConfig+0xb6>
 8000f5c:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8000f60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000f62:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8000f66:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000f6a:	f000 80a0 	beq.w	80010ae <UART_SetConfig+0x1be>
 8000f6e:	d807      	bhi.n	8000f80 <UART_SetConfig+0x90>
 8000f70:	2a00      	cmp	r2, #0
 8000f72:	f000 80aa 	beq.w	80010ca <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f7a:	d076      	beq.n	800106a <UART_SetConfig+0x17a>
        ret = HAL_ERROR;
 8000f7c:	2001      	movs	r0, #1
  return ret;
 8000f7e:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f80:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8000f84:	f000 8099 	beq.w	80010ba <UART_SetConfig+0x1ca>
 8000f88:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8000f8c:	d1f3      	bne.n	8000f76 <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f92:	d179      	bne.n	8001088 <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000f94:	6860      	ldr	r0, [r4, #4]
 8000f96:	0843      	lsrs	r3, r0, #1
 8000f98:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8000f9c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000fa0:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fa4:	e054      	b.n	8001050 <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000fa6:	4a53      	ldr	r2, [pc, #332]	; (80010f4 <UART_SetConfig+0x204>)
 8000fa8:	4295      	cmp	r5, r2
 8000faa:	d10e      	bne.n	8000fca <UART_SetConfig+0xda>
 8000fac:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8000fb0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000fb2:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8000fb6:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8000fba:	d078      	beq.n	80010ae <UART_SetConfig+0x1be>
 8000fbc:	d9d8      	bls.n	8000f70 <UART_SetConfig+0x80>
 8000fbe:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8000fc2:	d07a      	beq.n	80010ba <UART_SetConfig+0x1ca>
 8000fc4:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8000fc8:	e7e0      	b.n	8000f8c <UART_SetConfig+0x9c>
 8000fca:	4a4b      	ldr	r2, [pc, #300]	; (80010f8 <UART_SetConfig+0x208>)
 8000fcc:	4295      	cmp	r5, r2
 8000fce:	d10e      	bne.n	8000fee <UART_SetConfig+0xfe>
 8000fd0:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8000fd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000fd6:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8000fda:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8000fde:	d066      	beq.n	80010ae <UART_SetConfig+0x1be>
 8000fe0:	d9c6      	bls.n	8000f70 <UART_SetConfig+0x80>
 8000fe2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8000fe6:	d068      	beq.n	80010ba <UART_SetConfig+0x1ca>
 8000fe8:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8000fec:	e7ce      	b.n	8000f8c <UART_SetConfig+0x9c>
 8000fee:	4a43      	ldr	r2, [pc, #268]	; (80010fc <UART_SetConfig+0x20c>)
 8000ff0:	4295      	cmp	r5, r2
 8000ff2:	d1c0      	bne.n	8000f76 <UART_SetConfig+0x86>
 8000ff4:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8000ff8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000ffa:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8000ffe:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8001002:	d054      	beq.n	80010ae <UART_SetConfig+0x1be>
 8001004:	d9b4      	bls.n	8000f70 <UART_SetConfig+0x80>
 8001006:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800100a:	d056      	beq.n	80010ba <UART_SetConfig+0x1ca>
 800100c:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8001010:	e7bc      	b.n	8000f8c <UART_SetConfig+0x9c>
    switch (clocksource)
 8001012:	2a08      	cmp	r2, #8
 8001014:	d829      	bhi.n	800106a <UART_SetConfig+0x17a>
 8001016:	a301      	add	r3, pc, #4	; (adr r3, 800101c <UART_SetConfig+0x12c>)
 8001018:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800101c:	08001041 	.word	0x08001041
 8001020:	08001065 	.word	0x08001065
 8001024:	08000f95 	.word	0x08000f95
 8001028:	0800106b 	.word	0x0800106b
 800102c:	080010b5 	.word	0x080010b5
 8001030:	0800106b 	.word	0x0800106b
 8001034:	0800106b 	.word	0x0800106b
 8001038:	0800106b 	.word	0x0800106b
 800103c:	080010c1 	.word	0x080010c1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001040:	f7ff fdc8 	bl	8000bd4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001044:	6861      	ldr	r1, [r4, #4]
 8001046:	084a      	lsrs	r2, r1, #1
 8001048:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800104c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001050:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001052:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001054:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8001058:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800105a:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800105e:	4313      	orrs	r3, r2
 8001060:	60cb      	str	r3, [r1, #12]
 8001062:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001064:	f7ff fdce 	bl	8000c04 <HAL_RCC_GetPCLK2Freq>
 8001068:	e7ec      	b.n	8001044 <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 800106a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800106c:	2300      	movs	r3, #0
 800106e:	e7f1      	b.n	8001054 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001070:	f7ff fdc8 	bl	8000c04 <HAL_RCC_GetPCLK2Freq>
 8001074:	6863      	ldr	r3, [r4, #4]
 8001076:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800107a:	fbb0 f0f3 	udiv	r0, r0, r3
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <UART_SetConfig+0x1f8>)
 8001080:	b280      	uxth	r0, r0
 8001082:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001084:	2000      	movs	r0, #0
        break;
 8001086:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001088:	6862      	ldr	r2, [r4, #4]
 800108a:	0853      	lsrs	r3, r2, #1
 800108c:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001090:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001094:	fbb3 f3f2 	udiv	r3, r3, r2
 8001098:	b29b      	uxth	r3, r3
 800109a:	60eb      	str	r3, [r5, #12]
 800109c:	e7f2      	b.n	8001084 <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800109e:	f7ff fcc3 	bl	8000a28 <HAL_RCC_GetSysClockFreq>
 80010a2:	e017      	b.n	80010d4 <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80010a4:	6862      	ldr	r2, [r4, #4]
 80010a6:	0853      	lsrs	r3, r2, #1
 80010a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80010ac:	e7f2      	b.n	8001094 <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010b2:	d1f4      	bne.n	800109e <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80010b4:	f7ff fcb8 	bl	8000a28 <HAL_RCC_GetSysClockFreq>
 80010b8:	e7c4      	b.n	8001044 <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010be:	d1f1      	bne.n	80010a4 <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80010c0:	6860      	ldr	r0, [r4, #4]
 80010c2:	0843      	lsrs	r3, r0, #1
 80010c4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80010c8:	e76a      	b.n	8000fa0 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010ce:	d0b7      	beq.n	8001040 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80010d0:	f7ff fd80 	bl	8000bd4 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80010d4:	6863      	ldr	r3, [r4, #4]
 80010d6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80010da:	fbb0 f0f3 	udiv	r0, r0, r3
 80010de:	b280      	uxth	r0, r0
 80010e0:	60e8      	str	r0, [r5, #12]
 80010e2:	e7cf      	b.n	8001084 <UART_SetConfig+0x194>
 80010e4:	efff69f3 	.word	0xefff69f3
 80010e8:	40013800 	.word	0x40013800
 80010ec:	0800274c 	.word	0x0800274c
 80010f0:	40004400 	.word	0x40004400
 80010f4:	40004800 	.word	0x40004800
 80010f8:	40004c00 	.word	0x40004c00
 80010fc:	40005000 	.word	0x40005000

08001100 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001100:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001102:	07da      	lsls	r2, r3, #31
{
 8001104:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001106:	d506      	bpl.n	8001116 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001108:	6801      	ldr	r1, [r0, #0]
 800110a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800110c:	684a      	ldr	r2, [r1, #4]
 800110e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001112:	4322      	orrs	r2, r4
 8001114:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001116:	079c      	lsls	r4, r3, #30
 8001118:	d506      	bpl.n	8001128 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800111a:	6801      	ldr	r1, [r0, #0]
 800111c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800111e:	684a      	ldr	r2, [r1, #4]
 8001120:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001124:	4322      	orrs	r2, r4
 8001126:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001128:	0759      	lsls	r1, r3, #29
 800112a:	d506      	bpl.n	800113a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800112c:	6801      	ldr	r1, [r0, #0]
 800112e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001130:	684a      	ldr	r2, [r1, #4]
 8001132:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001136:	4322      	orrs	r2, r4
 8001138:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800113a:	071a      	lsls	r2, r3, #28
 800113c:	d506      	bpl.n	800114c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800113e:	6801      	ldr	r1, [r0, #0]
 8001140:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001142:	684a      	ldr	r2, [r1, #4]
 8001144:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001148:	4322      	orrs	r2, r4
 800114a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800114c:	06dc      	lsls	r4, r3, #27
 800114e:	d506      	bpl.n	800115e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001150:	6801      	ldr	r1, [r0, #0]
 8001152:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001154:	688a      	ldr	r2, [r1, #8]
 8001156:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800115a:	4322      	orrs	r2, r4
 800115c:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800115e:	0699      	lsls	r1, r3, #26
 8001160:	d506      	bpl.n	8001170 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001162:	6801      	ldr	r1, [r0, #0]
 8001164:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001166:	688a      	ldr	r2, [r1, #8]
 8001168:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800116c:	4322      	orrs	r2, r4
 800116e:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001170:	065a      	lsls	r2, r3, #25
 8001172:	d50f      	bpl.n	8001194 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001174:	6801      	ldr	r1, [r0, #0]
 8001176:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001178:	684a      	ldr	r2, [r1, #4]
 800117a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800117e:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001180:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001184:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001186:	d105      	bne.n	8001194 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001188:	684a      	ldr	r2, [r1, #4]
 800118a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800118c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001190:	4322      	orrs	r2, r4
 8001192:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001194:	061b      	lsls	r3, r3, #24
 8001196:	d506      	bpl.n	80011a6 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001198:	6802      	ldr	r2, [r0, #0]
 800119a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800119c:	6853      	ldr	r3, [r2, #4]
 800119e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80011a2:	430b      	orrs	r3, r1
 80011a4:	6053      	str	r3, [r2, #4]
 80011a6:	bd10      	pop	{r4, pc}

080011a8 <UART_WaitOnFlagUntilTimeout>:
{
 80011a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011ac:	9d06      	ldr	r5, [sp, #24]
 80011ae:	4604      	mov	r4, r0
 80011b0:	460f      	mov	r7, r1
 80011b2:	4616      	mov	r6, r2
 80011b4:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80011b6:	6821      	ldr	r1, [r4, #0]
 80011b8:	69ca      	ldr	r2, [r1, #28]
 80011ba:	ea37 0302 	bics.w	r3, r7, r2
 80011be:	bf0c      	ite	eq
 80011c0:	2201      	moveq	r2, #1
 80011c2:	2200      	movne	r2, #0
 80011c4:	42b2      	cmp	r2, r6
 80011c6:	d002      	beq.n	80011ce <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80011c8:	2000      	movs	r0, #0
}
 80011ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80011ce:	1c6b      	adds	r3, r5, #1
 80011d0:	d0f2      	beq.n	80011b8 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80011d2:	b99d      	cbnz	r5, 80011fc <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80011d4:	6823      	ldr	r3, [r4, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80011dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	f022 0201 	bic.w	r2, r2, #1
 80011e4:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80011e6:	2320      	movs	r3, #32
 80011e8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80011ec:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80011f0:	2300      	movs	r3, #0
 80011f2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80011f6:	2003      	movs	r0, #3
 80011f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80011fc:	f7ff f832 	bl	8000264 <HAL_GetTick>
 8001200:	eba0 0008 	sub.w	r0, r0, r8
 8001204:	4285      	cmp	r5, r0
 8001206:	d2d6      	bcs.n	80011b6 <UART_WaitOnFlagUntilTimeout+0xe>
 8001208:	e7e4      	b.n	80011d4 <UART_WaitOnFlagUntilTimeout+0x2c>

0800120a <HAL_UART_Transmit>:
{
 800120a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800120e:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001210:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001214:	2b20      	cmp	r3, #32
{
 8001216:	4604      	mov	r4, r0
 8001218:	460d      	mov	r5, r1
 800121a:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800121c:	d14c      	bne.n	80012b8 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 800121e:	2900      	cmp	r1, #0
 8001220:	d048      	beq.n	80012b4 <HAL_UART_Transmit+0xaa>
 8001222:	2a00      	cmp	r2, #0
 8001224:	d046      	beq.n	80012b4 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8001226:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800122a:	2b01      	cmp	r3, #1
 800122c:	d044      	beq.n	80012b8 <HAL_UART_Transmit+0xae>
 800122e:	2301      	movs	r3, #1
 8001230:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001234:	2300      	movs	r3, #0
 8001236:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001238:	2321      	movs	r3, #33	; 0x21
 800123a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 800123e:	f7ff f811 	bl	8000264 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001242:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001246:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001248:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800124c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001250:	b292      	uxth	r2, r2
 8001252:	b962      	cbnz	r2, 800126e <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001254:	9700      	str	r7, [sp, #0]
 8001256:	4633      	mov	r3, r6
 8001258:	2140      	movs	r1, #64	; 0x40
 800125a:	4620      	mov	r0, r4
 800125c:	f7ff ffa4 	bl	80011a8 <UART_WaitOnFlagUntilTimeout>
 8001260:	b998      	cbnz	r0, 800128a <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8001262:	2320      	movs	r3, #32
 8001264:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8001268:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 800126c:	e00e      	b.n	800128c <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 800126e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001272:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8001274:	3b01      	subs	r3, #1
 8001276:	b29b      	uxth	r3, r3
 8001278:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800127c:	2200      	movs	r2, #0
 800127e:	4633      	mov	r3, r6
 8001280:	2180      	movs	r1, #128	; 0x80
 8001282:	4620      	mov	r0, r4
 8001284:	f7ff ff90 	bl	80011a8 <UART_WaitOnFlagUntilTimeout>
 8001288:	b118      	cbz	r0, 8001292 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 800128a:	2003      	movs	r0, #3
}
 800128c:	b002      	add	sp, #8
 800128e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001292:	68a3      	ldr	r3, [r4, #8]
 8001294:	6822      	ldr	r2, [r4, #0]
 8001296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800129a:	d107      	bne.n	80012ac <HAL_UART_Transmit+0xa2>
 800129c:	6923      	ldr	r3, [r4, #16]
 800129e:	b92b      	cbnz	r3, 80012ac <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80012a0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80012a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012a8:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 80012aa:	e7cf      	b.n	800124c <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80012ac:	782b      	ldrb	r3, [r5, #0]
 80012ae:	8513      	strh	r3, [r2, #40]	; 0x28
 80012b0:	3501      	adds	r5, #1
 80012b2:	e7cb      	b.n	800124c <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80012b4:	2001      	movs	r0, #1
 80012b6:	e7e9      	b.n	800128c <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 80012b8:	2002      	movs	r0, #2
 80012ba:	e7e7      	b.n	800128c <HAL_UART_Transmit+0x82>

080012bc <UART_CheckIdleState>:
{
 80012bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80012be:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012c0:	2600      	movs	r6, #0
 80012c2:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80012c4:	f7fe ffce 	bl	8000264 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80012c8:	6823      	ldr	r3, [r4, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80012ce:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80012d0:	d417      	bmi.n	8001302 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80012d2:	6823      	ldr	r3, [r4, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	075b      	lsls	r3, r3, #29
 80012d8:	d50a      	bpl.n	80012f0 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80012da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2200      	movs	r2, #0
 80012e2:	462b      	mov	r3, r5
 80012e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80012e8:	4620      	mov	r0, r4
 80012ea:	f7ff ff5d 	bl	80011a8 <UART_WaitOnFlagUntilTimeout>
 80012ee:	b9a0      	cbnz	r0, 800131a <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 80012f0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80012f2:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80012f4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80012f8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80012fc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001300:	e00c      	b.n	800131c <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001302:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	4632      	mov	r2, r6
 800130a:	4603      	mov	r3, r0
 800130c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001310:	4620      	mov	r0, r4
 8001312:	f7ff ff49 	bl	80011a8 <UART_WaitOnFlagUntilTimeout>
 8001316:	2800      	cmp	r0, #0
 8001318:	d0db      	beq.n	80012d2 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800131a:	2003      	movs	r0, #3
}
 800131c:	b002      	add	sp, #8
 800131e:	bd70      	pop	{r4, r5, r6, pc}

08001320 <HAL_UART_Init>:
{
 8001320:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001322:	4604      	mov	r4, r0
 8001324:	b360      	cbz	r0, 8001380 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001326:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800132a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800132e:	b91b      	cbnz	r3, 8001338 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001330:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001334:	f001 f8aa 	bl	800248c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001338:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800133a:	2324      	movs	r3, #36	; 0x24
 800133c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001340:	6813      	ldr	r3, [r2, #0]
 8001342:	f023 0301 	bic.w	r3, r3, #1
 8001346:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001348:	4620      	mov	r0, r4
 800134a:	f7ff fdd1 	bl	8000ef0 <UART_SetConfig>
 800134e:	2801      	cmp	r0, #1
 8001350:	d016      	beq.n	8001380 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001352:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001354:	b113      	cbz	r3, 800135c <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001356:	4620      	mov	r0, r4
 8001358:	f7ff fed2 	bl	8001100 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800135c:	6823      	ldr	r3, [r4, #0]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001364:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800136c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001374:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001376:	601a      	str	r2, [r3, #0]
}
 8001378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800137c:	f7ff bf9e 	b.w	80012bc <UART_CheckIdleState>
}
 8001380:	2001      	movs	r0, #1
 8001382:	bd10      	pop	{r4, pc}

08001384 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001384:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001388:	2b21      	cmp	r3, #33	; 0x21
 800138a:	d127      	bne.n	80013dc <UART_Transmit_IT+0x58>
  {
    if(huart->TxXferCount == 0U)
 800138c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8001390:	6802      	ldr	r2, [r0, #0]
 8001392:	b29b      	uxth	r3, r3
 8001394:	b94b      	cbnz	r3, 80013aa <UART_Transmit_IT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001396:	6811      	ldr	r1, [r2, #0]
 8001398:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800139c:	6011      	str	r1, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800139e:	6811      	ldr	r1, [r2, #0]
 80013a0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80013a4:	6011      	str	r1, [r2, #0]
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
      }
      huart->TxXferCount--;

      return HAL_OK;
 80013a6:	2000      	movs	r0, #0
 80013a8:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013aa:	6883      	ldr	r3, [r0, #8]
 80013ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013b0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80013b2:	d10e      	bne.n	80013d2 <UART_Transmit_IT+0x4e>
 80013b4:	6901      	ldr	r1, [r0, #16]
 80013b6:	b961      	cbnz	r1, 80013d2 <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80013b8:	f833 1b02 	ldrh.w	r1, [r3], #2
 80013bc:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80013c0:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80013c2:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 80013c4:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80013c8:	3b01      	subs	r3, #1
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 80013d0:	e7e9      	b.n	80013a6 <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80013d2:	1c59      	adds	r1, r3, #1
 80013d4:	64c1      	str	r1, [r0, #76]	; 0x4c
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	8513      	strh	r3, [r2, #40]	; 0x28
 80013da:	e7f3      	b.n	80013c4 <UART_Transmit_IT+0x40>
    }
  }
  else
  {
    return HAL_BUSY;
 80013dc:	2002      	movs	r0, #2
  }
}
 80013de:	4770      	bx	lr

080013e0 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80013e0:	6801      	ldr	r1, [r0, #0]
{
 80013e2:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80013e4:	680b      	ldr	r3, [r1, #0]
 80013e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013ea:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80013ec:	2320      	movs	r3, #32
 80013ee:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 80013f2:	f7ff fd70 	bl	8000ed6 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80013f6:	2000      	movs	r0, #0
 80013f8:	bd08      	pop	{r3, pc}

080013fa <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80013fa:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80013fe:	2b22      	cmp	r3, #34	; 0x22
{
 8001400:	b510      	push	{r4, lr}
 8001402:	6803      	ldr	r3, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001404:	d129      	bne.n	800145a <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001406:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001408:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 800140a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800140e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001412:	ea02 0201 	and.w	r2, r2, r1
 8001416:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001418:	d11b      	bne.n	8001452 <UART_Receive_IT+0x58>
 800141a:	6901      	ldr	r1, [r0, #16]
 800141c:	b9c9      	cbnz	r1, 8001452 <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 800141e:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2U;
 8001422:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 8001424:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8001428:	3c01      	subs	r4, #1
 800142a:	b2a4      	uxth	r4, r4
 800142c:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 8001430:	b96c      	cbnz	r4, 800144e <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001432:	6803      	ldr	r3, [r0, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800143a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	f022 0201 	bic.w	r2, r2, #1
 8001442:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001444:	2320      	movs	r3, #32
 8001446:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 800144a:	f7ff fd45 	bl	8000ed8 <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 800144e:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 8001450:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001452:	1c59      	adds	r1, r3, #1
 8001454:	6541      	str	r1, [r0, #84]	; 0x54
 8001456:	701a      	strb	r2, [r3, #0]
 8001458:	e7e4      	b.n	8001424 <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800145a:	699a      	ldr	r2, [r3, #24]
 800145c:	f042 0208 	orr.w	r2, r2, #8
 8001460:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8001462:	2002      	movs	r0, #2
 8001464:	bd10      	pop	{r4, pc}
	...

08001468 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001468:	6802      	ldr	r2, [r0, #0]
 800146a:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800146c:	6811      	ldr	r1, [r2, #0]
{
 800146e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001470:	f013 050f 	ands.w	r5, r3, #15
{
 8001474:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8001476:	d107      	bne.n	8001488 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001478:	069e      	lsls	r6, r3, #26
 800147a:	d505      	bpl.n	8001488 <HAL_UART_IRQHandler+0x20>
 800147c:	068e      	lsls	r6, r1, #26
 800147e:	d503      	bpl.n	8001488 <HAL_UART_IRQHandler+0x20>
}
 8001480:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001484:	f7ff bfb9 	b.w	80013fa <UART_Receive_IT>
  cr3its = READ_REG(huart->Instance->CR3);
 8001488:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 800148a:	2d00      	cmp	r5, #0
 800148c:	d05c      	beq.n	8001548 <HAL_UART_IRQHandler+0xe0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800148e:	f010 0501 	ands.w	r5, r0, #1
 8001492:	d102      	bne.n	800149a <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8001494:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001498:	d056      	beq.n	8001548 <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800149a:	07d8      	lsls	r0, r3, #31
 800149c:	d507      	bpl.n	80014ae <HAL_UART_IRQHandler+0x46>
 800149e:	05ce      	lsls	r6, r1, #23
 80014a0:	d505      	bpl.n	80014ae <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80014a2:	2001      	movs	r0, #1
 80014a4:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80014a6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80014a8:	f040 0001 	orr.w	r0, r0, #1
 80014ac:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80014ae:	0798      	lsls	r0, r3, #30
 80014b0:	d506      	bpl.n	80014c0 <HAL_UART_IRQHandler+0x58>
 80014b2:	b12d      	cbz	r5, 80014c0 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80014b4:	2002      	movs	r0, #2
 80014b6:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80014b8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80014ba:	f040 0004 	orr.w	r0, r0, #4
 80014be:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80014c0:	075e      	lsls	r6, r3, #29
 80014c2:	d506      	bpl.n	80014d2 <HAL_UART_IRQHandler+0x6a>
 80014c4:	b12d      	cbz	r5, 80014d2 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80014c6:	2004      	movs	r0, #4
 80014c8:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80014ca:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80014cc:	f040 0002 	orr.w	r0, r0, #2
 80014d0:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80014d2:	0718      	lsls	r0, r3, #28
 80014d4:	d507      	bpl.n	80014e6 <HAL_UART_IRQHandler+0x7e>
 80014d6:	068e      	lsls	r6, r1, #26
 80014d8:	d400      	bmi.n	80014dc <HAL_UART_IRQHandler+0x74>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80014da:	b125      	cbz	r5, 80014e6 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80014dc:	2008      	movs	r0, #8
 80014de:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80014e0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80014e2:	4302      	orrs	r2, r0
 80014e4:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80014e6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80014e8:	2a00      	cmp	r2, #0
 80014ea:	d050      	beq.n	800158e <HAL_UART_IRQHandler+0x126>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80014ec:	0698      	lsls	r0, r3, #26
 80014ee:	d504      	bpl.n	80014fa <HAL_UART_IRQHandler+0x92>
 80014f0:	068a      	lsls	r2, r1, #26
 80014f2:	d502      	bpl.n	80014fa <HAL_UART_IRQHandler+0x92>
        UART_Receive_IT(huart);
 80014f4:	4620      	mov	r0, r4
 80014f6:	f7ff ff80 	bl	80013fa <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80014fa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80014fc:	071b      	lsls	r3, r3, #28
        UART_EndRxTransfer(huart);
 80014fe:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001500:	d404      	bmi.n	800150c <HAL_UART_IRQHandler+0xa4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001502:	6823      	ldr	r3, [r4, #0]
 8001504:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001506:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800150a:	d019      	beq.n	8001540 <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 800150c:	f7ff fcd6 	bl	8000ebc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001510:	6823      	ldr	r3, [r4, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	0656      	lsls	r6, r2, #25
 8001516:	d50f      	bpl.n	8001538 <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001518:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800151a:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800151c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001520:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8001522:	b148      	cbz	r0, 8001538 <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001524:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <HAL_UART_IRQHandler+0x128>)
 8001526:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001528:	f7fe fefe 	bl	8000328 <HAL_DMA_Abort_IT>
 800152c:	b378      	cbz	r0, 800158e <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800152e:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 8001530:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001534:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001536:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001538:	4620      	mov	r0, r4
 800153a:	f7ff fcce 	bl	8000eda <HAL_UART_ErrorCallback>
 800153e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001540:	f7ff fccb 	bl	8000eda <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001544:	66e5      	str	r5, [r4, #108]	; 0x6c
 8001546:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8001548:	02dd      	lsls	r5, r3, #11
 800154a:	d50e      	bpl.n	800156a <HAL_UART_IRQHandler+0x102>
 800154c:	0246      	lsls	r6, r0, #9
 800154e:	d50c      	bpl.n	800156a <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8001550:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001554:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8001556:	2320      	movs	r3, #32
 8001558:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    HAL_UARTEx_WakeupCallback(huart);
 800155c:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 800155e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 8001562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8001566:	f000 b815 	b.w	8001594 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800156a:	061d      	lsls	r5, r3, #24
 800156c:	d506      	bpl.n	800157c <HAL_UART_IRQHandler+0x114>
 800156e:	0608      	lsls	r0, r1, #24
 8001570:	d504      	bpl.n	800157c <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 8001572:	4620      	mov	r0, r4
}
 8001574:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 8001578:	f7ff bf04 	b.w	8001384 <UART_Transmit_IT>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800157c:	065a      	lsls	r2, r3, #25
 800157e:	d506      	bpl.n	800158e <HAL_UART_IRQHandler+0x126>
 8001580:	064b      	lsls	r3, r1, #25
 8001582:	d504      	bpl.n	800158e <HAL_UART_IRQHandler+0x126>
    UART_EndTransmit_IT(huart);
 8001584:	4620      	mov	r0, r4
}
 8001586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_EndTransmit_IT(huart);
 800158a:	f7ff bf29 	b.w	80013e0 <UART_EndTransmit_IT>
 800158e:	bd70      	pop	{r4, r5, r6, pc}
 8001590:	08000edd 	.word	0x08000edd

08001594 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8001594:	4770      	bx	lr

08001596 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001596:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001598:	f000 fbe6 	bl	8001d68 <vTaskStartScheduler>
  
  return osOK;
}
 800159c:	2000      	movs	r0, #0
 800159e:	bd08      	pop	{r3, pc}

080015a0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80015a0:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80015a2:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80015a6:	8a02      	ldrh	r2, [r0, #16]
{
 80015a8:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80015aa:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 80015ae:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 80015b0:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80015b2:	bf14      	ite	ne
 80015b4:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80015b6:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80015b8:	a803      	add	r0, sp, #12
 80015ba:	9001      	str	r0, [sp, #4]
 80015bc:	9400      	str	r4, [sp, #0]
 80015be:	4628      	mov	r0, r5
 80015c0:	f000 fb02 	bl	8001bc8 <xTaskCreate>
 80015c4:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80015c6:	bf0c      	ite	eq
 80015c8:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80015ca:	2000      	movne	r0, #0
}
 80015cc:	b005      	add	sp, #20
 80015ce:	bd30      	pop	{r4, r5, pc}

080015d0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80015d0:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80015d2:	2800      	cmp	r0, #0
 80015d4:	bf08      	it	eq
 80015d6:	2001      	moveq	r0, #1
 80015d8:	f000 fd14 	bl	8002004 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80015dc:	2000      	movs	r0, #0
 80015de:	bd08      	pop	{r3, pc}

080015e0 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80015e0:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015e2:	f000 fda7 	bl	8002134 <xTaskGetSchedulerState>
 80015e6:	2801      	cmp	r0, #1
 80015e8:	d003      	beq.n	80015f2 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80015ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80015ee:	f000 b909 	b.w	8001804 <xPortSysTickHandler>
 80015f2:	bd08      	pop	{r3, pc}

080015f4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015f4:	f100 0308 	add.w	r3, r0, #8
 80015f8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80015fa:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015fe:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001600:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001602:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001604:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001606:	6003      	str	r3, [r0, #0]
 8001608:	4770      	bx	lr

0800160a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800160a:	2300      	movs	r3, #0
 800160c:	6103      	str	r3, [r0, #16]
 800160e:	4770      	bx	lr

08001610 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001610:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001612:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800161c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800161e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001620:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001622:	3301      	adds	r3, #1
 8001624:	6003      	str	r3, [r0, #0]
 8001626:	4770      	bx	lr

08001628 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001628:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800162a:	1c53      	adds	r3, r2, #1
{
 800162c:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800162e:	d10a      	bne.n	8001646 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001630:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001636:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001638:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800163a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800163c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800163e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001640:	3301      	adds	r3, #1
 8001642:	6003      	str	r3, [r0, #0]
 8001644:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001646:	f100 0308 	add.w	r3, r0, #8
 800164a:	685c      	ldr	r4, [r3, #4]
 800164c:	6825      	ldr	r5, [r4, #0]
 800164e:	42aa      	cmp	r2, r5
 8001650:	d3ef      	bcc.n	8001632 <vListInsert+0xa>
 8001652:	4623      	mov	r3, r4
 8001654:	e7f9      	b.n	800164a <vListInsert+0x22>

08001656 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001656:	6841      	ldr	r1, [r0, #4]
 8001658:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800165a:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800165c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800165e:	6882      	ldr	r2, [r0, #8]
 8001660:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001662:	6859      	ldr	r1, [r3, #4]
 8001664:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001666:	bf08      	it	eq
 8001668:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800166a:	2200      	movs	r2, #0
 800166c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800166e:	6818      	ldr	r0, [r3, #0]
 8001670:	3801      	subs	r0, #1
 8001672:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001674:	4770      	bx	lr
	...

08001678 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <prvTaskExitError+0x2c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	3301      	adds	r3, #1
 800167e:	d008      	beq.n	8001692 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001684:	f383 8811 	msr	BASEPRI, r3
 8001688:	f3bf 8f6f 	isb	sy
 800168c:	f3bf 8f4f 	dsb	sy
 8001690:	e7fe      	b.n	8001690 <prvTaskExitError+0x18>
 8001692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001696:	f383 8811 	msr	BASEPRI, r3
 800169a:	f3bf 8f6f 	isb	sy
 800169e:	f3bf 8f4f 	dsb	sy
 80016a2:	e7fe      	b.n	80016a2 <prvTaskExitError+0x2a>
 80016a4:	20000008 	.word	0x20000008

080016a8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80016a8:	4806      	ldr	r0, [pc, #24]	; (80016c4 <prvPortStartFirstTask+0x1c>)
 80016aa:	6800      	ldr	r0, [r0, #0]
 80016ac:	6800      	ldr	r0, [r0, #0]
 80016ae:	f380 8808 	msr	MSP, r0
 80016b2:	b662      	cpsie	i
 80016b4:	b661      	cpsie	f
 80016b6:	f3bf 8f4f 	dsb	sy
 80016ba:	f3bf 8f6f 	isb	sy
 80016be:	df00      	svc	0
 80016c0:	bf00      	nop
 80016c2:	0000      	.short	0x0000
 80016c4:	e000ed08 	.word	0xe000ed08

080016c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80016c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80016d8 <vPortEnableVFP+0x10>
 80016cc:	6801      	ldr	r1, [r0, #0]
 80016ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80016d2:	6001      	str	r1, [r0, #0]
 80016d4:	4770      	bx	lr
 80016d6:	0000      	.short	0x0000
 80016d8:	e000ed88 	.word	0xe000ed88

080016dc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80016dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016e0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <pxPortInitialiseStack+0x28>)
 80016e6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80016ea:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80016ee:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80016f2:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80016f6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80016fa:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80016fe:	3844      	subs	r0, #68	; 0x44
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	08001679 	.word	0x08001679
	...

08001710 <SVC_Handler>:
	__asm volatile (
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <pxCurrentTCBConst2>)
 8001712:	6819      	ldr	r1, [r3, #0]
 8001714:	6808      	ldr	r0, [r1, #0]
 8001716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800171a:	f380 8809 	msr	PSP, r0
 800171e:	f3bf 8f6f 	isb	sy
 8001722:	f04f 0000 	mov.w	r0, #0
 8001726:	f380 8811 	msr	BASEPRI, r0
 800172a:	4770      	bx	lr
 800172c:	f3af 8000 	nop.w

08001730 <pxCurrentTCBConst2>:
 8001730:	20000c98 	.word	0x20000c98

08001734 <vPortEnterCritical>:
 8001734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001738:	f383 8811 	msr	BASEPRI, r3
 800173c:	f3bf 8f6f 	isb	sy
 8001740:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001744:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <vPortEnterCritical+0x3c>)
 8001746:	6813      	ldr	r3, [r2, #0]
 8001748:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800174a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800174c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800174e:	d10d      	bne.n	800176c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <vPortEnterCritical+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001758:	d008      	beq.n	800176c <vPortEnterCritical+0x38>
 800175a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800175e:	f383 8811 	msr	BASEPRI, r3
 8001762:	f3bf 8f6f 	isb	sy
 8001766:	f3bf 8f4f 	dsb	sy
 800176a:	e7fe      	b.n	800176a <vPortEnterCritical+0x36>
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000008 	.word	0x20000008
 8001774:	e000ed04 	.word	0xe000ed04

08001778 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001778:	4a08      	ldr	r2, [pc, #32]	; (800179c <vPortExitCritical+0x24>)
 800177a:	6813      	ldr	r3, [r2, #0]
 800177c:	b943      	cbnz	r3, 8001790 <vPortExitCritical+0x18>
 800177e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001782:	f383 8811 	msr	BASEPRI, r3
 8001786:	f3bf 8f6f 	isb	sy
 800178a:	f3bf 8f4f 	dsb	sy
 800178e:	e7fe      	b.n	800178e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001790:	3b01      	subs	r3, #1
 8001792:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001794:	b90b      	cbnz	r3, 800179a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001796:	f383 8811 	msr	BASEPRI, r3
 800179a:	4770      	bx	lr
 800179c:	20000008 	.word	0x20000008

080017a0 <PendSV_Handler>:
	__asm volatile
 80017a0:	f3ef 8009 	mrs	r0, PSP
 80017a4:	f3bf 8f6f 	isb	sy
 80017a8:	4b15      	ldr	r3, [pc, #84]	; (8001800 <pxCurrentTCBConst>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	f01e 0f10 	tst.w	lr, #16
 80017b0:	bf08      	it	eq
 80017b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80017b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017ba:	6010      	str	r0, [r2, #0]
 80017bc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80017c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80017c4:	f380 8811 	msr	BASEPRI, r0
 80017c8:	f3bf 8f4f 	dsb	sy
 80017cc:	f3bf 8f6f 	isb	sy
 80017d0:	f000 fc76 	bl	80020c0 <vTaskSwitchContext>
 80017d4:	f04f 0000 	mov.w	r0, #0
 80017d8:	f380 8811 	msr	BASEPRI, r0
 80017dc:	bc08      	pop	{r3}
 80017de:	6819      	ldr	r1, [r3, #0]
 80017e0:	6808      	ldr	r0, [r1, #0]
 80017e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017e6:	f01e 0f10 	tst.w	lr, #16
 80017ea:	bf08      	it	eq
 80017ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80017f0:	f380 8809 	msr	PSP, r0
 80017f4:	f3bf 8f6f 	isb	sy
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	f3af 8000 	nop.w

08001800 <pxCurrentTCBConst>:
 8001800:	20000c98 	.word	0x20000c98

08001804 <xPortSysTickHandler>:
{
 8001804:	b508      	push	{r3, lr}
	__asm volatile
 8001806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800180a:	f383 8811 	msr	BASEPRI, r3
 800180e:	f3bf 8f6f 	isb	sy
 8001812:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001816:	f000 faeb 	bl	8001df0 <xTaskIncrementTick>
 800181a:	b118      	cbz	r0, 8001824 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <xPortSysTickHandler+0x28>)
 800181e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001822:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001824:	2300      	movs	r3, #0
 8001826:	f383 8811 	msr	BASEPRI, r3
 800182a:	bd08      	pop	{r3, pc}
 800182c:	e000ed04 	.word	0xe000ed04

08001830 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <vPortSetupTimerInterrupt+0x1c>)
 8001832:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	fbb3 f3f2 	udiv	r3, r3, r2
 800183c:	4a04      	ldr	r2, [pc, #16]	; (8001850 <vPortSetupTimerInterrupt+0x20>)
 800183e:	3b01      	subs	r3, #1
 8001840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001842:	4b04      	ldr	r3, [pc, #16]	; (8001854 <vPortSetupTimerInterrupt+0x24>)
 8001844:	2207      	movs	r2, #7
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000058 	.word	0x20000058
 8001850:	e000e014 	.word	0xe000e014
 8001854:	e000e010 	.word	0xe000e010

08001858 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001858:	4b31      	ldr	r3, [pc, #196]	; (8001920 <xPortStartScheduler+0xc8>)
 800185a:	4a32      	ldr	r2, [pc, #200]	; (8001924 <xPortStartScheduler+0xcc>)
{
 800185c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800185e:	6819      	ldr	r1, [r3, #0]
 8001860:	4291      	cmp	r1, r2
 8001862:	d108      	bne.n	8001876 <xPortStartScheduler+0x1e>
	__asm volatile
 8001864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001868:	f383 8811 	msr	BASEPRI, r3
 800186c:	f3bf 8f6f 	isb	sy
 8001870:	f3bf 8f4f 	dsb	sy
 8001874:	e7fe      	b.n	8001874 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <xPortStartScheduler+0xd0>)
 800187a:	429a      	cmp	r2, r3
 800187c:	d108      	bne.n	8001890 <xPortStartScheduler+0x38>
 800187e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001882:	f383 8811 	msr	BASEPRI, r3
 8001886:	f3bf 8f6f 	isb	sy
 800188a:	f3bf 8f4f 	dsb	sy
 800188e:	e7fe      	b.n	800188e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001890:	4b26      	ldr	r3, [pc, #152]	; (800192c <xPortStartScheduler+0xd4>)
 8001892:	781a      	ldrb	r2, [r3, #0]
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001898:	22ff      	movs	r2, #255	; 0xff
 800189a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800189c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800189e:	4a24      	ldr	r2, [pc, #144]	; (8001930 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80018a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80018aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018ae:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80018b0:	4b20      	ldr	r3, [pc, #128]	; (8001934 <xPortStartScheduler+0xdc>)
 80018b2:	2207      	movs	r2, #7
 80018b4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80018b6:	2100      	movs	r1, #0
 80018b8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80018bc:	0600      	lsls	r0, r0, #24
 80018be:	f102 34ff 	add.w	r4, r2, #4294967295
 80018c2:	d423      	bmi.n	800190c <xPortStartScheduler+0xb4>
 80018c4:	b101      	cbz	r1, 80018c8 <xPortStartScheduler+0x70>
 80018c6:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80018cc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80018d0:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80018d2:	9b01      	ldr	r3, [sp, #4]
 80018d4:	4a15      	ldr	r2, [pc, #84]	; (800192c <xPortStartScheduler+0xd4>)
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <xPortStartScheduler+0xe0>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80018e2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80018ea:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80018ec:	f7ff ffa0 	bl	8001830 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <xPortStartScheduler+0xe4>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80018f6:	f7ff fee7 	bl	80016c8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80018fa:	4a11      	ldr	r2, [pc, #68]	; (8001940 <xPortStartScheduler+0xe8>)
 80018fc:	6813      	ldr	r3, [r2, #0]
 80018fe:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001902:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001904:	f7ff fed0 	bl	80016a8 <prvPortStartFirstTask>
	prvTaskExitError();
 8001908:	f7ff feb6 	bl	8001678 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800190c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001910:	0052      	lsls	r2, r2, #1
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	f88d 2003 	strb.w	r2, [sp, #3]
 8001918:	2101      	movs	r1, #1
 800191a:	4622      	mov	r2, r4
 800191c:	e7cc      	b.n	80018b8 <xPortStartScheduler+0x60>
 800191e:	bf00      	nop
 8001920:	e000ed00 	.word	0xe000ed00
 8001924:	410fc271 	.word	0x410fc271
 8001928:	410fc270 	.word	0x410fc270
 800192c:	e000e400 	.word	0xe000e400
 8001930:	20000078 	.word	0x20000078
 8001934:	2000007c 	.word	0x2000007c
 8001938:	e000ed20 	.word	0xe000ed20
 800193c:	20000008 	.word	0x20000008
 8001940:	e000ef34 	.word	0xe000ef34

08001944 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001944:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <prvInsertBlockIntoFreeList+0x40>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4282      	cmp	r2, r0
 800194c:	d318      	bcc.n	8001980 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800194e:	685c      	ldr	r4, [r3, #4]
 8001950:	1919      	adds	r1, r3, r4
 8001952:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001954:	bf01      	itttt	eq
 8001956:	6841      	ldreq	r1, [r0, #4]
 8001958:	4618      	moveq	r0, r3
 800195a:	1909      	addeq	r1, r1, r4
 800195c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800195e:	6844      	ldr	r4, [r0, #4]
 8001960:	1901      	adds	r1, r0, r4
 8001962:	428a      	cmp	r2, r1
 8001964:	d107      	bne.n	8001976 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001966:	4908      	ldr	r1, [pc, #32]	; (8001988 <prvInsertBlockIntoFreeList+0x44>)
 8001968:	6809      	ldr	r1, [r1, #0]
 800196a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800196c:	bf1f      	itttt	ne
 800196e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001970:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001972:	1909      	addne	r1, r1, r4
 8001974:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001976:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001978:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800197a:	bf18      	it	ne
 800197c:	6018      	strne	r0, [r3, #0]
 800197e:	bd10      	pop	{r4, pc}
 8001980:	4613      	mov	r3, r2
 8001982:	e7e1      	b.n	8001948 <prvInsertBlockIntoFreeList+0x4>
 8001984:	20000c90 	.word	0x20000c90
 8001988:	20000080 	.word	0x20000080

0800198c <pvPortMalloc>:
{
 800198c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001990:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001992:	f000 fa25 	bl	8001de0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001996:	493e      	ldr	r1, [pc, #248]	; (8001a90 <pvPortMalloc+0x104>)
 8001998:	4d3e      	ldr	r5, [pc, #248]	; (8001a94 <pvPortMalloc+0x108>)
 800199a:	680b      	ldr	r3, [r1, #0]
 800199c:	bb0b      	cbnz	r3, 80019e2 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800199e:	4a3e      	ldr	r2, [pc, #248]	; (8001a98 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80019a0:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80019a2:	bf1f      	itttt	ne
 80019a4:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80019a6:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80019aa:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
 80019ae:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80019b0:	bf14      	ite	ne
 80019b2:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80019b4:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80019b8:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80019ba:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80019bc:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80019c0:	4e36      	ldr	r6, [pc, #216]	; (8001a9c <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 80019c2:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80019c4:	2000      	movs	r0, #0
 80019c6:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80019c8:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80019ca:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80019cc:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80019ce:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80019d0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80019d2:	4b33      	ldr	r3, [pc, #204]	; (8001aa0 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80019d4:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80019d6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80019d8:	4b32      	ldr	r3, [pc, #200]	; (8001aa4 <pvPortMalloc+0x118>)
 80019da:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80019dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80019e0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80019e2:	682f      	ldr	r7, [r5, #0]
 80019e4:	4227      	tst	r7, r4
 80019e6:	d116      	bne.n	8001a16 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80019e8:	2c00      	cmp	r4, #0
 80019ea:	d041      	beq.n	8001a70 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80019ec:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80019f0:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80019f2:	bf1c      	itt	ne
 80019f4:	f023 0307 	bicne.w	r3, r3, #7
 80019f8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80019fa:	b163      	cbz	r3, 8001a16 <pvPortMalloc+0x8a>
 80019fc:	4a29      	ldr	r2, [pc, #164]	; (8001aa4 <pvPortMalloc+0x118>)
 80019fe:	6816      	ldr	r6, [r2, #0]
 8001a00:	42b3      	cmp	r3, r6
 8001a02:	4690      	mov	r8, r2
 8001a04:	d807      	bhi.n	8001a16 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8001a06:	4a25      	ldr	r2, [pc, #148]	; (8001a9c <pvPortMalloc+0x110>)
 8001a08:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001a0a:	6868      	ldr	r0, [r5, #4]
 8001a0c:	4283      	cmp	r3, r0
 8001a0e:	d804      	bhi.n	8001a1a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001a10:	6809      	ldr	r1, [r1, #0]
 8001a12:	428d      	cmp	r5, r1
 8001a14:	d107      	bne.n	8001a26 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8001a16:	2400      	movs	r4, #0
 8001a18:	e02a      	b.n	8001a70 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001a1a:	682c      	ldr	r4, [r5, #0]
 8001a1c:	2c00      	cmp	r4, #0
 8001a1e:	d0f7      	beq.n	8001a10 <pvPortMalloc+0x84>
 8001a20:	462a      	mov	r2, r5
 8001a22:	4625      	mov	r5, r4
 8001a24:	e7f1      	b.n	8001a0a <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001a26:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001a28:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001a2a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001a2c:	1ac2      	subs	r2, r0, r3
 8001a2e:	2a10      	cmp	r2, #16
 8001a30:	d90f      	bls.n	8001a52 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001a32:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001a34:	0741      	lsls	r1, r0, #29
 8001a36:	d008      	beq.n	8001a4a <pvPortMalloc+0xbe>
 8001a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a3c:	f383 8811 	msr	BASEPRI, r3
 8001a40:	f3bf 8f6f 	isb	sy
 8001a44:	f3bf 8f4f 	dsb	sy
 8001a48:	e7fe      	b.n	8001a48 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001a4a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001a4c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001a4e:	f7ff ff79 	bl	8001944 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001a52:	4913      	ldr	r1, [pc, #76]	; (8001aa0 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001a54:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001a56:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001a58:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001a5a:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001a5c:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8001a5e:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001a62:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001a66:	bf38      	it	cc
 8001a68:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001a6a:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001a6c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001a6e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001a70:	f000 fa50 	bl	8001f14 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001a74:	0763      	lsls	r3, r4, #29
 8001a76:	d008      	beq.n	8001a8a <pvPortMalloc+0xfe>
 8001a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a7c:	f383 8811 	msr	BASEPRI, r3
 8001a80:	f3bf 8f6f 	isb	sy
 8001a84:	f3bf 8f4f 	dsb	sy
 8001a88:	e7fe      	b.n	8001a88 <pvPortMalloc+0xfc>
}
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a90:	20000080 	.word	0x20000080
 8001a94:	20000c84 	.word	0x20000c84
 8001a98:	20000084 	.word	0x20000084
 8001a9c:	20000c90 	.word	0x20000c90
 8001aa0:	20000c8c 	.word	0x20000c8c
 8001aa4:	20000c88 	.word	0x20000c88

08001aa8 <vPortFree>:
{
 8001aa8:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001aaa:	4604      	mov	r4, r0
 8001aac:	b370      	cbz	r0, 8001b0c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001aae:	4a18      	ldr	r2, [pc, #96]	; (8001b10 <vPortFree+0x68>)
 8001ab0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	4213      	tst	r3, r2
 8001ab8:	d108      	bne.n	8001acc <vPortFree+0x24>
 8001aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001abe:	f383 8811 	msr	BASEPRI, r3
 8001ac2:	f3bf 8f6f 	isb	sy
 8001ac6:	f3bf 8f4f 	dsb	sy
 8001aca:	e7fe      	b.n	8001aca <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001acc:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001ad0:	b141      	cbz	r1, 8001ae4 <vPortFree+0x3c>
 8001ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad6:	f383 8811 	msr	BASEPRI, r3
 8001ada:	f3bf 8f6f 	isb	sy
 8001ade:	f3bf 8f4f 	dsb	sy
 8001ae2:	e7fe      	b.n	8001ae2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001ae4:	ea23 0302 	bic.w	r3, r3, r2
 8001ae8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001aec:	f000 f978 	bl	8001de0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001af0:	4a08      	ldr	r2, [pc, #32]	; (8001b14 <vPortFree+0x6c>)
 8001af2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8001af6:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001af8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001afc:	440b      	add	r3, r1
 8001afe:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001b00:	f7ff ff20 	bl	8001944 <prvInsertBlockIntoFreeList>
}
 8001b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001b08:	f000 ba04 	b.w	8001f14 <xTaskResumeAll>
 8001b0c:	bd10      	pop	{r4, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000c84 	.word	0x20000c84
 8001b14:	20000c88 	.word	0x20000c88

08001b18 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b18:	4a06      	ldr	r2, [pc, #24]	; (8001b34 <prvResetNextTaskUnblockTime+0x1c>)
 8001b1a:	6813      	ldr	r3, [r2, #0]
 8001b1c:	6819      	ldr	r1, [r3, #0]
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <prvResetNextTaskUnblockTime+0x20>)
 8001b20:	b919      	cbnz	r1, 8001b2a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001b22:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001b2e:	68d2      	ldr	r2, [r2, #12]
 8001b30:	6852      	ldr	r2, [r2, #4]
 8001b32:	e7f8      	b.n	8001b26 <prvResetNextTaskUnblockTime+0xe>
 8001b34:	20000c9c 	.word	0x20000c9c
 8001b38:	20000d74 	.word	0x20000d74

08001b3c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b40:	4e1b      	ldr	r6, [pc, #108]	; (8001bb0 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001b42:	681d      	ldr	r5, [r3, #0]
{
 8001b44:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b46:	6830      	ldr	r0, [r6, #0]
 8001b48:	3004      	adds	r0, #4
{
 8001b4a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b4c:	f7ff fd83 	bl	8001656 <uxListRemove>
 8001b50:	4633      	mov	r3, r6
 8001b52:	b940      	cbnz	r0, 8001b66 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001b54:	6831      	ldr	r1, [r6, #0]
 8001b56:	4e17      	ldr	r6, [pc, #92]	; (8001bb4 <prvAddCurrentTaskToDelayedList+0x78>)
 8001b58:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001b5a:	6832      	ldr	r2, [r6, #0]
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	4088      	lsls	r0, r1
 8001b60:	ea22 0200 	bic.w	r2, r2, r0
 8001b64:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001b66:	1c62      	adds	r2, r4, #1
 8001b68:	d107      	bne.n	8001b7a <prvAddCurrentTaskToDelayedList+0x3e>
 8001b6a:	b137      	cbz	r7, 8001b7a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b6c:	6819      	ldr	r1, [r3, #0]
 8001b6e:	4812      	ldr	r0, [pc, #72]	; (8001bb8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001b70:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001b72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b76:	f7ff bd4b 	b.w	8001610 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001b7a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001b7c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001b7e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001b80:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001b82:	d907      	bls.n	8001b94 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b84:	4a0d      	ldr	r2, [pc, #52]	; (8001bbc <prvAddCurrentTaskToDelayedList+0x80>)
 8001b86:	6810      	ldr	r0, [r2, #0]
 8001b88:	6819      	ldr	r1, [r3, #0]
}
 8001b8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b8e:	3104      	adds	r1, #4
 8001b90:	f7ff bd4a 	b.w	8001628 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b94:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <prvAddCurrentTaskToDelayedList+0x84>)
 8001b96:	6810      	ldr	r0, [r2, #0]
 8001b98:	6819      	ldr	r1, [r3, #0]
 8001b9a:	3104      	adds	r1, #4
 8001b9c:	f7ff fd44 	bl	8001628 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <prvAddCurrentTaskToDelayedList+0x88>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001ba6:	bf38      	it	cc
 8001ba8:	601c      	strcc	r4, [r3, #0]
 8001baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bac:	20000dbc 	.word	0x20000dbc
 8001bb0:	20000c98 	.word	0x20000c98
 8001bb4:	20000d44 	.word	0x20000d44
 8001bb8:	20000d94 	.word	0x20000d94
 8001bbc:	20000ca0 	.word	0x20000ca0
 8001bc0:	20000c9c 	.word	0x20000c9c
 8001bc4:	20000d74 	.word	0x20000d74

08001bc8 <xTaskCreate>:
	{
 8001bc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bcc:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8001bd0:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bd2:	4650      	mov	r0, sl
	{
 8001bd4:	460f      	mov	r7, r1
 8001bd6:	4699      	mov	r9, r3
 8001bd8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bda:	f7ff fed7 	bl	800198c <pvPortMalloc>
			if( pxStack != NULL )
 8001bde:	4605      	mov	r5, r0
 8001be0:	2800      	cmp	r0, #0
 8001be2:	f000 8096 	beq.w	8001d12 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001be6:	2054      	movs	r0, #84	; 0x54
 8001be8:	f7ff fed0 	bl	800198c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001bec:	4604      	mov	r4, r0
 8001bee:	2800      	cmp	r0, #0
 8001bf0:	f000 808c 	beq.w	8001d0c <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001bf4:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8001bf8:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001bfa:	4455      	add	r5, sl
 8001bfc:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001bfe:	f025 0a07 	bic.w	sl, r5, #7
 8001c02:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8001c06:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001c08:	7859      	ldrb	r1, [r3, #1]
 8001c0a:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001c0e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001c12:	b109      	cbz	r1, 8001c18 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001c14:	42bb      	cmp	r3, r7
 8001c16:	d1f7      	bne.n	8001c08 <xTaskCreate+0x40>
 8001c18:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001c1a:	2d06      	cmp	r5, #6
 8001c1c:	bf28      	it	cs
 8001c1e:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001c20:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001c24:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8001c26:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001c28:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001c2a:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001c2c:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001c30:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001c34:	f7ff fce9 	bl	800160a <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c38:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001c3c:	f104 0018 	add.w	r0, r4, #24
 8001c40:	f7ff fce3 	bl	800160a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001c44:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001c48:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c4a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001c4c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001c4e:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001c52:	464a      	mov	r2, r9
 8001c54:	4641      	mov	r1, r8
 8001c56:	4650      	mov	r0, sl
 8001c58:	f7ff fd40 	bl	80016dc <pxPortInitialiseStack>
 8001c5c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001c5e:	b106      	cbz	r6, 8001c62 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001c60:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8001c62:	f7ff fd67 	bl	8001734 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001c66:	4b32      	ldr	r3, [pc, #200]	; (8001d30 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8001c68:	4e32      	ldr	r6, [pc, #200]	; (8001d34 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001d60 <xTaskCreate+0x198>
 8001c70:	3201      	adds	r2, #1
 8001c72:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001c74:	6835      	ldr	r5, [r6, #0]
 8001c76:	2d00      	cmp	r5, #0
 8001c78:	d14e      	bne.n	8001d18 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8001c7a:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d11d      	bne.n	8001cbe <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001c82:	eb08 0005 	add.w	r0, r8, r5
 8001c86:	3514      	adds	r5, #20
 8001c88:	f7ff fcb4 	bl	80015f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c8c:	2d8c      	cmp	r5, #140	; 0x8c
 8001c8e:	d1f8      	bne.n	8001c82 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8001c90:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001d64 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8001c94:	4d28      	ldr	r5, [pc, #160]	; (8001d38 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8001c96:	4648      	mov	r0, r9
 8001c98:	f7ff fcac 	bl	80015f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001c9c:	4628      	mov	r0, r5
 8001c9e:	f7ff fca9 	bl	80015f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001ca2:	4826      	ldr	r0, [pc, #152]	; (8001d3c <xTaskCreate+0x174>)
 8001ca4:	f7ff fca6 	bl	80015f4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001ca8:	4825      	ldr	r0, [pc, #148]	; (8001d40 <xTaskCreate+0x178>)
 8001caa:	f7ff fca3 	bl	80015f4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001cae:	4825      	ldr	r0, [pc, #148]	; (8001d44 <xTaskCreate+0x17c>)
 8001cb0:	f7ff fca0 	bl	80015f4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001cb4:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <xTaskCreate+0x180>)
 8001cb6:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001cba:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <xTaskCreate+0x184>)
 8001cbc:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001cbe:	4a24      	ldr	r2, [pc, #144]	; (8001d50 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8001cc0:	4924      	ldr	r1, [pc, #144]	; (8001d54 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8001cc2:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001cc4:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001cca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ccc:	2501      	movs	r5, #1
 8001cce:	fa05 f302 	lsl.w	r3, r5, r2
 8001cd2:	4303      	orrs	r3, r0
 8001cd4:	2014      	movs	r0, #20
 8001cd6:	600b      	str	r3, [r1, #0]
 8001cd8:	fb00 8002 	mla	r0, r0, r2, r8
 8001cdc:	4639      	mov	r1, r7
 8001cde:	f7ff fc97 	bl	8001610 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001ce2:	f7ff fd49 	bl	8001778 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <xTaskCreate+0x190>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	b163      	cbz	r3, 8001d06 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001cec:	6833      	ldr	r3, [r6, #0]
 8001cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d207      	bcs.n	8001d06 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8001cf6:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <xTaskCreate+0x194>)
 8001cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	f3bf 8f4f 	dsb	sy
 8001d02:	f3bf 8f6f 	isb	sy
	}
 8001d06:	4628      	mov	r0, r5
 8001d08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8001d0c:	4628      	mov	r0, r5
 8001d0e:	f7ff fecb 	bl	8001aa8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001d12:	f04f 35ff 	mov.w	r5, #4294967295
 8001d16:	e7f6      	b.n	8001d06 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <xTaskCreate+0x190>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1ce      	bne.n	8001cbe <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001d20:	6833      	ldr	r3, [r6, #0]
 8001d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d26:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001d28:	bf98      	it	ls
 8001d2a:	6034      	strls	r4, [r6, #0]
 8001d2c:	e7c7      	b.n	8001cbe <xTaskCreate+0xf6>
 8001d2e:	bf00      	nop
 8001d30:	20000d30 	.word	0x20000d30
 8001d34:	20000c98 	.word	0x20000c98
 8001d38:	20000d5c 	.word	0x20000d5c
 8001d3c:	20000d7c 	.word	0x20000d7c
 8001d40:	20000da8 	.word	0x20000da8
 8001d44:	20000d94 	.word	0x20000d94
 8001d48:	20000c9c 	.word	0x20000c9c
 8001d4c:	20000ca0 	.word	0x20000ca0
 8001d50:	20000d40 	.word	0x20000d40
 8001d54:	20000d44 	.word	0x20000d44
 8001d58:	20000d90 	.word	0x20000d90
 8001d5c:	e000ed04 	.word	0xe000ed04
 8001d60:	20000ca4 	.word	0x20000ca4
 8001d64:	20000d48 	.word	0x20000d48

08001d68 <vTaskStartScheduler>:
{
 8001d68:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001d6a:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <vTaskStartScheduler+0x60>)
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	2400      	movs	r4, #0
 8001d70:	9400      	str	r4, [sp, #0]
 8001d72:	4623      	mov	r3, r4
 8001d74:	2280      	movs	r2, #128	; 0x80
 8001d76:	4915      	ldr	r1, [pc, #84]	; (8001dcc <vTaskStartScheduler+0x64>)
 8001d78:	4815      	ldr	r0, [pc, #84]	; (8001dd0 <vTaskStartScheduler+0x68>)
 8001d7a:	f7ff ff25 	bl	8001bc8 <xTaskCreate>
	if( xReturn == pdPASS )
 8001d7e:	2801      	cmp	r0, #1
 8001d80:	d114      	bne.n	8001dac <vTaskStartScheduler+0x44>
 8001d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d86:	f383 8811 	msr	BASEPRI, r3
 8001d8a:	f3bf 8f6f 	isb	sy
 8001d8e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <vTaskStartScheduler+0x6c>)
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <vTaskStartScheduler+0x70>)
 8001d9c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <vTaskStartScheduler+0x74>)
 8001da0:	601c      	str	r4, [r3, #0]
}
 8001da2:	b002      	add	sp, #8
 8001da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001da8:	f7ff bd56 	b.w	8001858 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001dac:	3001      	adds	r0, #1
 8001dae:	d108      	bne.n	8001dc2 <vTaskStartScheduler+0x5a>
 8001db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db4:	f383 8811 	msr	BASEPRI, r3
 8001db8:	f3bf 8f6f 	isb	sy
 8001dbc:	f3bf 8f4f 	dsb	sy
 8001dc0:	e7fe      	b.n	8001dc0 <vTaskStartScheduler+0x58>
}
 8001dc2:	b002      	add	sp, #8
 8001dc4:	bd10      	pop	{r4, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000d70 	.word	0x20000d70
 8001dcc:	08002750 	.word	0x08002750
 8001dd0:	0800204d 	.word	0x0800204d
 8001dd4:	20000d74 	.word	0x20000d74
 8001dd8:	20000d90 	.word	0x20000d90
 8001ddc:	20000dbc 	.word	0x20000dbc

08001de0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001de0:	4a02      	ldr	r2, [pc, #8]	; (8001dec <vTaskSuspendAll+0xc>)
 8001de2:	6813      	ldr	r3, [r2, #0]
 8001de4:	3301      	adds	r3, #1
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000d3c 	.word	0x20000d3c

08001df0 <xTaskIncrementTick>:
{
 8001df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001df4:	4b3c      	ldr	r3, [pc, #240]	; (8001ee8 <xTaskIncrementTick+0xf8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d153      	bne.n	8001ea4 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8001dfc:	4b3b      	ldr	r3, [pc, #236]	; (8001eec <xTaskIncrementTick+0xfc>)
 8001dfe:	681c      	ldr	r4, [r3, #0]
 8001e00:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001e02:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8001e04:	b9bc      	cbnz	r4, 8001e36 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001e06:	4b3a      	ldr	r3, [pc, #232]	; (8001ef0 <xTaskIncrementTick+0x100>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	b142      	cbz	r2, 8001e20 <xTaskIncrementTick+0x30>
 8001e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e12:	f383 8811 	msr	BASEPRI, r3
 8001e16:	f3bf 8f6f 	isb	sy
 8001e1a:	f3bf 8f4f 	dsb	sy
 8001e1e:	e7fe      	b.n	8001e1e <xTaskIncrementTick+0x2e>
 8001e20:	4a34      	ldr	r2, [pc, #208]	; (8001ef4 <xTaskIncrementTick+0x104>)
 8001e22:	6819      	ldr	r1, [r3, #0]
 8001e24:	6810      	ldr	r0, [r2, #0]
 8001e26:	6018      	str	r0, [r3, #0]
 8001e28:	6011      	str	r1, [r2, #0]
 8001e2a:	4a33      	ldr	r2, [pc, #204]	; (8001ef8 <xTaskIncrementTick+0x108>)
 8001e2c:	6813      	ldr	r3, [r2, #0]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	f7ff fe71 	bl	8001b18 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001e36:	4d31      	ldr	r5, [pc, #196]	; (8001efc <xTaskIncrementTick+0x10c>)
 8001e38:	4f31      	ldr	r7, [pc, #196]	; (8001f00 <xTaskIncrementTick+0x110>)
 8001e3a:	682b      	ldr	r3, [r5, #0]
 8001e3c:	429c      	cmp	r4, r3
 8001e3e:	f04f 0b00 	mov.w	fp, #0
 8001e42:	d33e      	bcc.n	8001ec2 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e44:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001ef0 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001e48:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001f10 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e4c:	f8d8 2000 	ldr.w	r2, [r8]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	bb72      	cbnz	r2, 8001eb2 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e54:	f04f 32ff 	mov.w	r2, #4294967295
 8001e58:	602a      	str	r2, [r5, #0]
					break;
 8001e5a:	e032      	b.n	8001ec2 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e5c:	f106 0a04 	add.w	sl, r6, #4
 8001e60:	4650      	mov	r0, sl
 8001e62:	f7ff fbf8 	bl	8001656 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001e66:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001e68:	b119      	cbz	r1, 8001e72 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e6a:	f106 0018 	add.w	r0, r6, #24
 8001e6e:	f7ff fbf2 	bl	8001656 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001e72:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001e74:	f8d9 3000 	ldr.w	r3, [r9]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	fa02 f100 	lsl.w	r1, r2, r0
 8001e7e:	4319      	orrs	r1, r3
 8001e80:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <xTaskIncrementTick+0x114>)
 8001e82:	f8c9 1000 	str.w	r1, [r9]
 8001e86:	f04f 0e14 	mov.w	lr, #20
 8001e8a:	4651      	mov	r1, sl
 8001e8c:	fb0e 3000 	mla	r0, lr, r0, r3
 8001e90:	f7ff fbbe 	bl	8001610 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e94:	6838      	ldr	r0, [r7, #0]
 8001e96:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8001e98:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8001e9a:	4291      	cmp	r1, r2
 8001e9c:	bf28      	it	cs
 8001e9e:	f04f 0b01 	movcs.w	fp, #1
 8001ea2:	e7d3      	b.n	8001e4c <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8001ea4:	4a18      	ldr	r2, [pc, #96]	; (8001f08 <xTaskIncrementTick+0x118>)
 8001ea6:	6813      	ldr	r3, [r2, #0]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8001eac:	f04f 0b00 	mov.w	fp, #0
 8001eb0:	e011      	b.n	8001ed6 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001eb2:	f8d8 2000 	ldr.w	r2, [r8]
 8001eb6:	68d2      	ldr	r2, [r2, #12]
 8001eb8:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001eba:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8001ebc:	428c      	cmp	r4, r1
 8001ebe:	d2cd      	bcs.n	8001e5c <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8001ec0:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <xTaskIncrementTick+0x114>)
 8001ec6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ec8:	2214      	movs	r2, #20
 8001eca:	434a      	muls	r2, r1
 8001ecc:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8001ece:	2a02      	cmp	r2, #2
 8001ed0:	bf28      	it	cs
 8001ed2:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8001ed6:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <xTaskIncrementTick+0x11c>)
 8001ed8:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8001eda:	2a00      	cmp	r2, #0
 8001edc:	bf18      	it	ne
 8001ede:	f04f 0b01 	movne.w	fp, #1
}
 8001ee2:	4658      	mov	r0, fp
 8001ee4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ee8:	20000d3c 	.word	0x20000d3c
 8001eec:	20000dbc 	.word	0x20000dbc
 8001ef0:	20000c9c 	.word	0x20000c9c
 8001ef4:	20000ca0 	.word	0x20000ca0
 8001ef8:	20000d78 	.word	0x20000d78
 8001efc:	20000d74 	.word	0x20000d74
 8001f00:	20000c98 	.word	0x20000c98
 8001f04:	20000ca4 	.word	0x20000ca4
 8001f08:	20000d38 	.word	0x20000d38
 8001f0c:	20000dc0 	.word	0x20000dc0
 8001f10:	20000d44 	.word	0x20000d44

08001f14 <xTaskResumeAll>:
{
 8001f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001f18:	4c31      	ldr	r4, [pc, #196]	; (8001fe0 <xTaskResumeAll+0xcc>)
 8001f1a:	6823      	ldr	r3, [r4, #0]
 8001f1c:	b943      	cbnz	r3, 8001f30 <xTaskResumeAll+0x1c>
 8001f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f22:	f383 8811 	msr	BASEPRI, r3
 8001f26:	f3bf 8f6f 	isb	sy
 8001f2a:	f3bf 8f4f 	dsb	sy
 8001f2e:	e7fe      	b.n	8001f2e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8001f30:	f7ff fc00 	bl	8001734 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f3a:	6824      	ldr	r4, [r4, #0]
 8001f3c:	b12c      	cbz	r4, 8001f4a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8001f3e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001f40:	f7ff fc1a 	bl	8001778 <vPortExitCritical>
}
 8001f44:	4620      	mov	r0, r4
 8001f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001f4a:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <xTaskResumeAll+0xd0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f5      	beq.n	8001f3e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f52:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001ffc <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8001f56:	4f24      	ldr	r7, [pc, #144]	; (8001fe8 <xTaskResumeAll+0xd4>)
 8001f58:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002000 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f5c:	f8d9 3000 	ldr.w	r3, [r9]
 8001f60:	b9e3      	cbnz	r3, 8001f9c <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8001f62:	b10c      	cbz	r4, 8001f68 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8001f64:	f7ff fdd8 	bl	8001b18 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001f68:	4d20      	ldr	r5, [pc, #128]	; (8001fec <xTaskResumeAll+0xd8>)
 8001f6a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001f6c:	b144      	cbz	r4, 8001f80 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8001f6e:	4e20      	ldr	r6, [pc, #128]	; (8001ff0 <xTaskResumeAll+0xdc>)
 8001f70:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8001f72:	f7ff ff3d 	bl	8001df0 <xTaskIncrementTick>
 8001f76:	b100      	cbz	r0, 8001f7a <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8001f78:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001f7a:	3c01      	subs	r4, #1
 8001f7c:	d1f9      	bne.n	8001f72 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8001f7e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8001f80:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <xTaskResumeAll+0xdc>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0da      	beq.n	8001f3e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8001f88:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <xTaskResumeAll+0xe0>)
 8001f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	f3bf 8f4f 	dsb	sy
 8001f94:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001f98:	2401      	movs	r4, #1
 8001f9a:	e7d1      	b.n	8001f40 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001f9c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8001fa0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001fa2:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001fa4:	f104 0018 	add.w	r0, r4, #24
 8001fa8:	f7ff fb55 	bl	8001656 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001fac:	4630      	mov	r0, r6
 8001fae:	f7ff fb52 	bl	8001656 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001fb2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001fb4:	6839      	ldr	r1, [r7, #0]
 8001fb6:	2501      	movs	r5, #1
 8001fb8:	fa05 f302 	lsl.w	r3, r5, r2
 8001fbc:	2014      	movs	r0, #20
 8001fbe:	430b      	orrs	r3, r1
 8001fc0:	fb00 8002 	mla	r0, r0, r2, r8
 8001fc4:	4631      	mov	r1, r6
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	f7ff fb22 	bl	8001610 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <xTaskResumeAll+0xe4>)
 8001fce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8001fd6:	bf24      	itt	cs
 8001fd8:	4b05      	ldrcs	r3, [pc, #20]	; (8001ff0 <xTaskResumeAll+0xdc>)
 8001fda:	601d      	strcs	r5, [r3, #0]
 8001fdc:	e7be      	b.n	8001f5c <xTaskResumeAll+0x48>
 8001fde:	bf00      	nop
 8001fe0:	20000d3c 	.word	0x20000d3c
 8001fe4:	20000d30 	.word	0x20000d30
 8001fe8:	20000d44 	.word	0x20000d44
 8001fec:	20000d38 	.word	0x20000d38
 8001ff0:	20000dc0 	.word	0x20000dc0
 8001ff4:	e000ed04 	.word	0xe000ed04
 8001ff8:	20000c98 	.word	0x20000c98
 8001ffc:	20000d7c 	.word	0x20000d7c
 8002000:	20000ca4 	.word	0x20000ca4

08002004 <vTaskDelay>:
	{
 8002004:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002006:	b940      	cbnz	r0, 800201a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002008:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <vTaskDelay+0x40>)
 800200a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	f3bf 8f4f 	dsb	sy
 8002014:	f3bf 8f6f 	isb	sy
 8002018:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <vTaskDelay+0x44>)
 800201c:	6819      	ldr	r1, [r3, #0]
 800201e:	b141      	cbz	r1, 8002032 <vTaskDelay+0x2e>
 8002020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002024:	f383 8811 	msr	BASEPRI, r3
 8002028:	f3bf 8f6f 	isb	sy
 800202c:	f3bf 8f4f 	dsb	sy
 8002030:	e7fe      	b.n	8002030 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002032:	f7ff fed5 	bl	8001de0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002036:	f7ff fd81 	bl	8001b3c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800203a:	f7ff ff6b 	bl	8001f14 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800203e:	2800      	cmp	r0, #0
 8002040:	d0e2      	beq.n	8002008 <vTaskDelay+0x4>
 8002042:	bd08      	pop	{r3, pc}
 8002044:	e000ed04 	.word	0xe000ed04
 8002048:	20000d3c 	.word	0x20000d3c

0800204c <prvIdleTask>:
{
 800204c:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800204e:	4e17      	ldr	r6, [pc, #92]	; (80020ac <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002050:	4c17      	ldr	r4, [pc, #92]	; (80020b0 <prvIdleTask+0x64>)
 8002052:	6823      	ldr	r3, [r4, #0]
 8002054:	b963      	cbnz	r3, 8002070 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002056:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <prvIdleTask+0x68>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d9f8      	bls.n	8002050 <prvIdleTask+0x4>
				taskYIELD();
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <prvIdleTask+0x6c>)
 8002060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	f3bf 8f4f 	dsb	sy
 800206a:	f3bf 8f6f 	isb	sy
 800206e:	e7ef      	b.n	8002050 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8002070:	f7ff feb6 	bl	8001de0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002074:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8002076:	f7ff ff4d 	bl	8001f14 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800207a:	2d00      	cmp	r5, #0
 800207c:	d0e9      	beq.n	8002052 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 800207e:	f7ff fb59 	bl	8001734 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002082:	68f3      	ldr	r3, [r6, #12]
 8002084:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002086:	1d28      	adds	r0, r5, #4
 8002088:	f7ff fae5 	bl	8001656 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800208c:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <prvIdleTask+0x70>)
 800208e:	6813      	ldr	r3, [r2, #0]
 8002090:	3b01      	subs	r3, #1
 8002092:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002094:	6823      	ldr	r3, [r4, #0]
 8002096:	3b01      	subs	r3, #1
 8002098:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 800209a:	f7ff fb6d 	bl	8001778 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800209e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80020a0:	f7ff fd02 	bl	8001aa8 <vPortFree>
			vPortFree( pxTCB );
 80020a4:	4628      	mov	r0, r5
 80020a6:	f7ff fcff 	bl	8001aa8 <vPortFree>
 80020aa:	e7d2      	b.n	8002052 <prvIdleTask+0x6>
 80020ac:	20000da8 	.word	0x20000da8
 80020b0:	20000d34 	.word	0x20000d34
 80020b4:	20000ca4 	.word	0x20000ca4
 80020b8:	e000ed04 	.word	0xe000ed04
 80020bc:	20000d30 	.word	0x20000d30

080020c0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020c0:	4b17      	ldr	r3, [pc, #92]	; (8002120 <vTaskSwitchContext+0x60>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b17      	ldr	r3, [pc, #92]	; (8002124 <vTaskSwitchContext+0x64>)
{
 80020c6:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020c8:	b112      	cbz	r2, 80020d0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80020ca:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80020d0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <vTaskSwitchContext+0x68>)
 80020d4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80020d6:	fab3 f383 	clz	r3, r3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f1c3 031f 	rsb	r3, r3, #31
 80020e0:	2214      	movs	r2, #20
 80020e2:	4912      	ldr	r1, [pc, #72]	; (800212c <vTaskSwitchContext+0x6c>)
 80020e4:	435a      	muls	r2, r3
 80020e6:	1888      	adds	r0, r1, r2
 80020e8:	588c      	ldr	r4, [r1, r2]
 80020ea:	b944      	cbnz	r4, 80020fe <vTaskSwitchContext+0x3e>
	__asm volatile
 80020ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f0:	f383 8811 	msr	BASEPRI, r3
 80020f4:	f3bf 8f6f 	isb	sy
 80020f8:	f3bf 8f4f 	dsb	sy
 80020fc:	e7fe      	b.n	80020fc <vTaskSwitchContext+0x3c>
 80020fe:	6844      	ldr	r4, [r0, #4]
 8002100:	3208      	adds	r2, #8
 8002102:	6864      	ldr	r4, [r4, #4]
 8002104:	6044      	str	r4, [r0, #4]
 8002106:	440a      	add	r2, r1
 8002108:	4294      	cmp	r4, r2
 800210a:	bf04      	itt	eq
 800210c:	6862      	ldreq	r2, [r4, #4]
 800210e:	6042      	streq	r2, [r0, #4]
 8002110:	2214      	movs	r2, #20
 8002112:	fb02 1303 	mla	r3, r2, r3, r1
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	4b05      	ldr	r3, [pc, #20]	; (8002130 <vTaskSwitchContext+0x70>)
 800211c:	e7d6      	b.n	80020cc <vTaskSwitchContext+0xc>
 800211e:	bf00      	nop
 8002120:	20000d3c 	.word	0x20000d3c
 8002124:	20000dc0 	.word	0x20000dc0
 8002128:	20000d44 	.word	0x20000d44
 800212c:	20000ca4 	.word	0x20000ca4
 8002130:	20000c98 	.word	0x20000c98

08002134 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <xTaskGetSchedulerState+0x18>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	b133      	cbz	r3, 8002148 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <xTaskGetSchedulerState+0x1c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8002140:	bf0c      	ite	eq
 8002142:	2002      	moveq	r0, #2
 8002144:	2000      	movne	r0, #0
 8002146:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002148:	2001      	movs	r0, #1
	}
 800214a:	4770      	bx	lr
 800214c:	20000d90 	.word	0x20000d90
 8002150:	20000d3c 	.word	0x20000d3c

08002154 <myItoa.part.0>:
	{
		*ptr='0';
		return 1;
	}

	if(value<0)
 8002154:	1e03      	subs	r3, r0, #0
	{
		value*=(-1);
		*ptr++='-';
 8002156:	bfbc      	itt	lt
 8002158:	222d      	movlt	r2, #45	; 0x2d
		value*=(-1);
 800215a:	425b      	neglt	r3, r3
int myItoa(int value,char *ptr)
 800215c:	b530      	push	{r4, r5, lr}
		*ptr++='-';
 800215e:	bfbd      	ittte	lt
 8002160:	700a      	strblt	r2, [r1, #0]
		count++;
 8002162:	2401      	movlt	r4, #1
		*ptr++='-';
 8002164:	3101      	addlt	r1, #1
	int count=0,temp;
 8002166:	2400      	movge	r4, #0
	}
	for(temp=value;temp>0;temp/=10,ptr++);
 8002168:	461a      	mov	r2, r3
 800216a:	200a      	movs	r0, #10
 800216c:	b932      	cbnz	r2, 800217c <myItoa.part.0+0x28>
	*ptr='\0';
 800216e:	700a      	strb	r2, [r1, #0]
	for(temp=value;temp>0;temp/=10)
	{
		*--ptr=temp%10+'0';
 8002170:	250a      	movs	r5, #10
	*ptr='\0';
 8002172:	460a      	mov	r2, r1
 8002174:	1aa0      	subs	r0, r4, r2
 8002176:	4408      	add	r0, r1
	for(temp=value;temp>0;temp/=10)
 8002178:	b923      	cbnz	r3, 8002184 <myItoa.part.0+0x30>
		count++;
	}
	return count;
}
 800217a:	bd30      	pop	{r4, r5, pc}
	for(temp=value;temp>0;temp/=10,ptr++);
 800217c:	fb92 f2f0 	sdiv	r2, r2, r0
 8002180:	3101      	adds	r1, #1
 8002182:	e7f3      	b.n	800216c <myItoa.part.0+0x18>
		*--ptr=temp%10+'0';
 8002184:	fb93 f0f5 	sdiv	r0, r3, r5
 8002188:	fb05 3310 	mls	r3, r5, r0, r3
 800218c:	3330      	adds	r3, #48	; 0x30
 800218e:	f802 3d01 	strb.w	r3, [r2, #-1]!
	for(temp=value;temp>0;temp/=10)
 8002192:	4603      	mov	r3, r0
 8002194:	e7ee      	b.n	8002174 <myItoa.part.0+0x20>
	...

08002198 <runCarHw>:
void runCarHw(UART_HandleTypeDef *huart1, UART_HandleTypeDef *huartTx) {
 8002198:	b5f0      	push	{r4, r5, r6, r7, lr}
	aTxBuffer3[0] = (uint8_t) '<';
 800219a:	4d16      	ldr	r5, [pc, #88]	; (80021f4 <runCarHw+0x5c>)
void runCarHw(UART_HandleTypeDef *huart1, UART_HandleTypeDef *huartTx) {
 800219c:	b087      	sub	sp, #28
	aTxBuffer3[0] = (uint8_t) '<';
 800219e:	233c      	movs	r3, #60	; 0x3c
void runCarHw(UART_HandleTypeDef *huart1, UART_HandleTypeDef *huartTx) {
 80021a0:	460f      	mov	r7, r1
 80021a2:	2064      	movs	r0, #100	; 0x64
 80021a4:	a901      	add	r1, sp, #4
	aTxBuffer3[0] = (uint8_t) '<';
 80021a6:	702b      	strb	r3, [r5, #0]
 80021a8:	f7ff ffd4 	bl	8002154 <myItoa.part.0>
	memcpy(&aTxBuffer3[pos], &buf[0], length+1);
 80021ac:	1c44      	adds	r4, r0, #1
 80021ae:	4622      	mov	r2, r4
 80021b0:	a901      	add	r1, sp, #4
 80021b2:	1c68      	adds	r0, r5, #1
 80021b4:	f000 fa7c 	bl	80026b0 <memcpy>
	aTxBuffer3[pos] = (uint8_t) ',';
 80021b8:	232c      	movs	r3, #44	; 0x2c
 80021ba:	a901      	add	r1, sp, #4
 80021bc:	2064      	movs	r0, #100	; 0x64
 80021be:	552b      	strb	r3, [r5, r4]
 80021c0:	f7ff ffc8 	bl	8002154 <myItoa.part.0>
	memcpy(&aTxBuffer3[pos], &buf[0], length+1);
 80021c4:	a901      	add	r1, sp, #4
 80021c6:	1c42      	adds	r2, r0, #1
 80021c8:	4606      	mov	r6, r0
 80021ca:	1928      	adds	r0, r5, r4
 80021cc:	f000 fa70 	bl	80026b0 <memcpy>
	pos = pos + length+1;
 80021d0:	19a2      	adds	r2, r4, r6
 80021d2:	3201      	adds	r2, #1
	aTxBuffer3[pos] = (uint8_t) '>';
 80021d4:	233e      	movs	r3, #62	; 0x3e
 80021d6:	54ab      	strb	r3, [r5, r2]
	if(HAL_UART_Transmit(huartTx, (uint8_t*)aTxBuffer3, pos+1, 5000)!= HAL_OK)
 80021d8:	3201      	adds	r2, #1
 80021da:	f241 3388 	movw	r3, #5000	; 0x1388
 80021de:	b292      	uxth	r2, r2
 80021e0:	4629      	mov	r1, r5
 80021e2:	4638      	mov	r0, r7
 80021e4:	f7ff f811 	bl	800120a <HAL_UART_Transmit>
 80021e8:	b108      	cbz	r0, 80021ee <runCarHw+0x56>
		Error_Handler();
 80021ea:	f000 f92d 	bl	8002448 <Error_Handler>
}
 80021ee:	b007      	add	sp, #28
 80021f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021f2:	bf00      	nop
 80021f4:	2000000c 	.word	0x2000000c

080021f8 <runDriver>:
#include "driver.h"
#include "main.h"
#include "stm32f3xx_hal.h"
#include "cmsis_os.h"

void runDriver() {
 80021f8:	b508      	push	{r3, lr}
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80021fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021fe:	2120      	movs	r1, #32
 8002200:	f7fe f98b 	bl	800051a <HAL_GPIO_TogglePin>
	  osDelay(600);
 8002204:	f44f 7016 	mov.w	r0, #600	; 0x258
}
 8002208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  osDelay(600);
 800220c:	f7ff b9e0 	b.w	80015d0 <osDelay>

08002210 <runExtEnvironment>:
 *  Created on: 10 feb. 2019
 *      Author: erlin
 */
#include "extEnvironment.h"

void runExtEnvironment() {
 8002210:	4770      	bx	lr
	...

08002214 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002214:	b508      	push	{r3, lr}
//		if(HAL_UART_Receive(&huart1, (uint8_t *)aRxBuffer, 100, 5000) != HAL_OK)
//		{
//			Error_Handler();
//		}

		runCarHw(&huart1, &huart3);
 8002216:	4d05      	ldr	r5, [pc, #20]	; (800222c <StartDefaultTask+0x18>)
 8002218:	4c05      	ldr	r4, [pc, #20]	; (8002230 <StartDefaultTask+0x1c>)
 800221a:	4620      	mov	r0, r4
 800221c:	4629      	mov	r1, r5
 800221e:	f7ff ffbb 	bl	8002198 <runCarHw>
		osDelay(1);
 8002222:	2001      	movs	r0, #1
 8002224:	f7ff f9d4 	bl	80015d0 <osDelay>
 8002228:	e7f7      	b.n	800221a <StartDefaultTask+0x6>
 800222a:	bf00      	nop
 800222c:	20000eac 	.word	0x20000eac
 8002230:	20000e38 	.word	0x20000e38

08002234 <StartDriver>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDriver */
void StartDriver(void const * argument)
{
 8002234:	b508      	push	{r3, lr}
//		HAL_GPIO_DeInit(LD2_GPIO_Port, LD2_Pin);
//		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		//	  osDelay(300);

		runDriver();
 8002236:	f7ff ffdf 	bl	80021f8 <runDriver>
		osDelay(1);
 800223a:	2001      	movs	r0, #1
 800223c:	f7ff f9c8 	bl	80015d0 <osDelay>
 8002240:	e7f9      	b.n	8002236 <StartDriver+0x2>

08002242 <StartExtEnvTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartExtEnvTask */
void StartExtEnvTask(void const * argument)
{
 8002242:	b508      	push	{r3, lr}
	/* USER CODE BEGIN StartExtEnvTask */
	/* Infinite loop */
	for(;;)
	{
		runExtEnvironment();
 8002244:	f7ff ffe4 	bl	8002210 <runExtEnvironment>
		osDelay(1);
 8002248:	2001      	movs	r0, #1
 800224a:	f7ff f9c1 	bl	80015d0 <osDelay>
 800224e:	e7f9      	b.n	8002244 <StartExtEnvTask+0x2>

08002250 <SystemClock_Config>:
{
 8002250:	b530      	push	{r4, r5, lr}
 8002252:	b0a7      	sub	sp, #156	; 0x9c
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002254:	2228      	movs	r2, #40	; 0x28
 8002256:	2100      	movs	r1, #0
 8002258:	a806      	add	r0, sp, #24
 800225a:	f000 fa34 	bl	80026c6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800225e:	2214      	movs	r2, #20
 8002260:	2100      	movs	r1, #0
 8002262:	a801      	add	r0, sp, #4
 8002264:	f000 fa2f 	bl	80026c6 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002268:	2258      	movs	r2, #88	; 0x58
 800226a:	2100      	movs	r1, #0
 800226c:	a810      	add	r0, sp, #64	; 0x40
 800226e:	f000 fa2a 	bl	80026c6 <memset>
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002272:	2301      	movs	r3, #1
 8002274:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002276:	2310      	movs	r3, #16
 8002278:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800227a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800227e:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002280:	930d      	str	r3, [sp, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002282:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002284:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002288:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800228a:	9506      	str	r5, [sp, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800228c:	950c      	str	r5, [sp, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800228e:	f7fe f949 	bl	8000524 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002292:	230f      	movs	r3, #15
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002294:	2400      	movs	r4, #0
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002296:	9301      	str	r3, [sp, #4]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002298:	4629      	mov	r1, r5
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800229a:	f44f 6380 	mov.w	r3, #1024	; 0x400
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800229e:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022a0:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022a2:	9502      	str	r5, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022a4:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022a6:	9405      	str	r4, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022a8:	f7fe fbea 	bl	8000a80 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80022ac:	2307      	movs	r3, #7
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022ae:	a810      	add	r0, sp, #64	; 0x40
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80022b0:	9310      	str	r3, [sp, #64]	; 0x40
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022b2:	9412      	str	r4, [sp, #72]	; 0x48
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022b4:	9413      	str	r4, [sp, #76]	; 0x4c
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80022b6:	9414      	str	r4, [sp, #80]	; 0x50
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022b8:	f7fe fcbc 	bl	8000c34 <HAL_RCCEx_PeriphCLKConfig>
}
 80022bc:	b027      	add	sp, #156	; 0x9c
 80022be:	bd30      	pop	{r4, r5, pc}

080022c0 <main>:
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b094      	sub	sp, #80	; 0x50
	HAL_Init();
 80022c4:	f7fd ffb0 	bl	8000228 <HAL_Init>
	SystemClock_Config();
 80022c8:	f7ff ffc2 	bl	8002250 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	2214      	movs	r2, #20
 80022ce:	2100      	movs	r1, #0
 80022d0:	a80f      	add	r0, sp, #60	; 0x3c
 80022d2:	f000 f9f8 	bl	80026c6 <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80022d6:	4b4e      	ldr	r3, [pc, #312]	; (8002410 <main+0x150>)
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80022de:	615a      	str	r2, [r3, #20]
 80022e0:	695a      	ldr	r2, [r3, #20]
 80022e2:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80022e6:	9201      	str	r2, [sp, #4]
 80022e8:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80022ea:	695a      	ldr	r2, [r3, #20]
 80022ec:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80022f0:	615a      	str	r2, [r3, #20]
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80022f8:	9202      	str	r2, [sp, #8]
 80022fa:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002302:	615a      	str	r2, [r3, #20]
 8002304:	695a      	ldr	r2, [r3, #20]
 8002306:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800230a:	9203      	str	r2, [sp, #12]
 800230c:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002314:	615a      	str	r2, [r3, #20]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800231c:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800231e:	9304      	str	r3, [sp, #16]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002320:	2120      	movs	r1, #32
 8002322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002326:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002328:	f7fe f8f2 	bl	8000510 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = B1_Pin;
 800232c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2400      	movs	r4, #0
	GPIO_InitStruct.Pin = B1_Pin;
 8002332:	930f      	str	r3, [sp, #60]	; 0x3c
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002334:	a90f      	add	r1, sp, #60	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002336:	4b37      	ldr	r3, [pc, #220]	; (8002414 <main+0x154>)
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002338:	4837      	ldr	r0, [pc, #220]	; (8002418 <main+0x158>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800233a:	9310      	str	r3, [sp, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	9411      	str	r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800233e:	f7fe f817 	bl	8000370 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD2_Pin;
 8002342:	2320      	movs	r3, #32
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002344:	a90f      	add	r1, sp, #60	; 0x3c
	GPIO_InitStruct.Pin = LD2_Pin;
 8002346:	930f      	str	r3, [sp, #60]	; 0x3c
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234c:	2301      	movs	r3, #1
 800234e:	9310      	str	r3, [sp, #64]	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	9411      	str	r4, [sp, #68]	; 0x44
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002352:	9412      	str	r4, [sp, #72]	; 0x48
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002354:	f7fe f80c 	bl	8000370 <HAL_GPIO_Init>
	huart2.Instance = USART2;
 8002358:	4830      	ldr	r0, [pc, #192]	; (800241c <main+0x15c>)
	huart2.Init.BaudRate = 38400;
 800235a:	4b31      	ldr	r3, [pc, #196]	; (8002420 <main+0x160>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800235c:	6084      	str	r4, [r0, #8]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800235e:	250c      	movs	r5, #12
	huart2.Init.BaudRate = 38400;
 8002360:	f44f 4616 	mov.w	r6, #38400	; 0x9600
 8002364:	e880 0048 	stmia.w	r0, {r3, r6}
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002368:	6145      	str	r5, [r0, #20]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800236a:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800236c:	6104      	str	r4, [r0, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800236e:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002370:	61c4      	str	r4, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002372:	6204      	str	r4, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002374:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002376:	f7fe ffd3 	bl	8001320 <HAL_UART_Init>
	huart1.Instance = USART1;
 800237a:	482a      	ldr	r0, [pc, #168]	; (8002424 <main+0x164>)
 800237c:	4b2a      	ldr	r3, [pc, #168]	; (8002428 <main+0x168>)
	huart1.Init.Mode = UART_MODE_TX_RX;
 800237e:	6145      	str	r5, [r0, #20]
	huart1.Init.BaudRate = 38400;
 8002380:	e880 0048 	stmia.w	r0, {r3, r6}
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002384:	6084      	str	r4, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002386:	60c4      	str	r4, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002388:	6104      	str	r4, [r0, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800238a:	6184      	str	r4, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800238c:	61c4      	str	r4, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800238e:	6204      	str	r4, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002390:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002392:	f7fe ffc5 	bl	8001320 <HAL_UART_Init>
    huart3.pRxBuffPtr = &aRxBuffer[0];
 8002396:	4825      	ldr	r0, [pc, #148]	; (800242c <main+0x16c>)
 8002398:	4b25      	ldr	r3, [pc, #148]	; (8002430 <main+0x170>)
	huart3.Init.BaudRate = 9600;
 800239a:	4a26      	ldr	r2, [pc, #152]	; (8002434 <main+0x174>)
    huart3.pRxBuffPtr = &aRxBuffer[0];
 800239c:	6543      	str	r3, [r0, #84]	; 0x54
	huart3.Init.Mode = UART_MODE_TX_RX;
 800239e:	6145      	str	r5, [r0, #20]
    huart3.RxXferSize = 100;
 80023a0:	2364      	movs	r3, #100	; 0x64
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80023a2:	4d25      	ldr	r5, [pc, #148]	; (8002438 <main+0x178>)
    huart3.RxXferSize = 100;
 80023a4:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
	huart3.Init.BaudRate = 9600;
 80023a8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80023ac:	e880 000c 	stmia.w	r0, {r2, r3}
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023b0:	6084      	str	r4, [r0, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80023b2:	60c4      	str	r4, [r0, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80023b4:	6104      	str	r4, [r0, #16]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b6:	6184      	str	r4, [r0, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b8:	61c4      	str	r4, [r0, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023ba:	6204      	str	r4, [r0, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023bc:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80023be:	f7fe ffaf 	bl	8001320 <HAL_UART_Init>
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80023c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023c4:	af05      	add	r7, sp, #20
 80023c6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80023c8:	462e      	mov	r6, r5
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80023ca:	4621      	mov	r1, r4
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80023cc:	f856 3b04 	ldr.w	r3, [r6], #4
 80023d0:	603b      	str	r3, [r7, #0]
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80023d2:	a805      	add	r0, sp, #20
 80023d4:	f7ff f8e4 	bl	80015a0 <osThreadCreate>
 80023d8:	4b18      	ldr	r3, [pc, #96]	; (800243c <main+0x17c>)
 80023da:	6018      	str	r0, [r3, #0]
	osThreadDef(driverTask, StartDriver, osPriorityIdle, 0, 128);
 80023dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80023de:	af0a      	add	r7, sp, #40	; 0x28
 80023e0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80023e2:	6833      	ldr	r3, [r6, #0]
 80023e4:	603b      	str	r3, [r7, #0]
	driverTaskHandle = osThreadCreate(osThread(driverTask), NULL);
 80023e6:	4621      	mov	r1, r4
 80023e8:	a80a      	add	r0, sp, #40	; 0x28
 80023ea:	f7ff f8d9 	bl	80015a0 <osThreadCreate>
 80023ee:	4b14      	ldr	r3, [pc, #80]	; (8002440 <main+0x180>)
	osThreadDef(extlEnvTask, StartExtEnvTask, osPriorityIdle, 0, 128);
 80023f0:	3518      	adds	r5, #24
	driverTaskHandle = osThreadCreate(osThread(driverTask), NULL);
 80023f2:	6018      	str	r0, [r3, #0]
	osThreadDef(extlEnvTask, StartExtEnvTask, osPriorityIdle, 0, 128);
 80023f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023f6:	ae0f      	add	r6, sp, #60	; 0x3c
 80023f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80023fa:	682b      	ldr	r3, [r5, #0]
 80023fc:	6033      	str	r3, [r6, #0]
	extlEnvTaskHandle = osThreadCreate(osThread(extlEnvTask), NULL);
 80023fe:	4621      	mov	r1, r4
 8002400:	a80f      	add	r0, sp, #60	; 0x3c
 8002402:	f7ff f8cd 	bl	80015a0 <osThreadCreate>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <main+0x184>)
 8002408:	6018      	str	r0, [r3, #0]
	osKernelStart();
 800240a:	f7ff f8c4 	bl	8001596 <osKernelStart>
 800240e:	e7fe      	b.n	800240e <main+0x14e>
 8002410:	40021000 	.word	0x40021000
 8002414:	10210000 	.word	0x10210000
 8002418:	48000800 	.word	0x48000800
 800241c:	20000f94 	.word	0x20000f94
 8002420:	40004400 	.word	0x40004400
 8002424:	20000e38 	.word	0x20000e38
 8002428:	40013800 	.word	0x40013800
 800242c:	20000eac 	.word	0x20000eac
 8002430:	20000f28 	.word	0x20000f28
 8002434:	40004800 	.word	0x40004800
 8002438:	080026f0 	.word	0x080026f0
 800243c:	20000ea8 	.word	0x20000ea8
 8002440:	20001004 	.word	0x20001004
 8002444:	20000f1c 	.word	0x20000f1c

08002448 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002448:	4770      	bx	lr
	...

0800244c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244c:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <HAL_MspInit+0x3c>)
{
 800244e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002450:	699a      	ldr	r2, [r3, #24]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	619a      	str	r2, [r3, #24]
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	f002 0201 	and.w	r2, r2, #1
 800245e:	9200      	str	r2, [sp, #0]
 8002460:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002462:	69da      	ldr	r2, [r3, #28]
 8002464:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002468:	61da      	str	r2, [r3, #28]
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002470:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002472:	2200      	movs	r2, #0
 8002474:	210f      	movs	r1, #15
 8002476:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800247c:	f7fd ff0a 	bl	8000294 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002480:	b003      	add	sp, #12
 8002482:	f85d fb04 	ldr.w	pc, [sp], #4
 8002486:	bf00      	nop
 8002488:	40021000 	.word	0x40021000

0800248c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800248c:	b510      	push	{r4, lr}
 800248e:	4604      	mov	r4, r0
 8002490:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002492:	2214      	movs	r2, #20
 8002494:	2100      	movs	r1, #0
 8002496:	a807      	add	r0, sp, #28
 8002498:	f000 f915 	bl	80026c6 <memset>
  if(huart->Instance==USART1)
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	4a33      	ldr	r2, [pc, #204]	; (800256c <HAL_UART_MspInit+0xe0>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d120      	bne.n	80024e6 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024a4:	4b32      	ldr	r3, [pc, #200]	; (8002570 <HAL_UART_MspInit+0xe4>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a6:	4833      	ldr	r0, [pc, #204]	; (8002574 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80024a8:	699a      	ldr	r2, [r3, #24]
 80024aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024ae:	619a      	str	r2, [r3, #24]
 80024b0:	699a      	ldr	r2, [r3, #24]
 80024b2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80024b6:	9201      	str	r2, [sp, #4]
 80024b8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80024c0:	615a      	str	r2, [r3, #20]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024c8:	9302      	str	r3, [sp, #8]
 80024ca:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80024cc:	2330      	movs	r3, #48	; 0x30
 80024ce:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
 80024d2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024d4:	2303      	movs	r3, #3
 80024d6:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024d8:	2307      	movs	r3, #7
 80024da:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024dc:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024de:	f7fd ff47 	bl	8000370 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024e2:	b00c      	add	sp, #48	; 0x30
 80024e4:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 80024e6:	4a24      	ldr	r2, [pc, #144]	; (8002578 <HAL_UART_MspInit+0xec>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d11c      	bne.n	8002526 <HAL_UART_MspInit+0x9a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80024ec:	4b20      	ldr	r3, [pc, #128]	; (8002570 <HAL_UART_MspInit+0xe4>)
 80024ee:	69da      	ldr	r2, [r3, #28]
 80024f0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80024f4:	61da      	str	r2, [r3, #28]
 80024f6:	69da      	ldr	r2, [r3, #28]
 80024f8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80024fc:	9203      	str	r2, [sp, #12]
 80024fe:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002506:	615a      	str	r2, [r3, #20]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	9304      	str	r3, [sp, #16]
 8002510:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002512:	230c      	movs	r3, #12
 8002514:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800251a:	2307      	movs	r3, #7
 800251c:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251e:	a907      	add	r1, sp, #28
 8002520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002524:	e7db      	b.n	80024de <HAL_UART_MspInit+0x52>
  else if(huart->Instance==USART3)
 8002526:	4a15      	ldr	r2, [pc, #84]	; (800257c <HAL_UART_MspInit+0xf0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d1da      	bne.n	80024e2 <HAL_UART_MspInit+0x56>
    __HAL_RCC_USART3_CLK_ENABLE();
 800252c:	4b10      	ldr	r3, [pc, #64]	; (8002570 <HAL_UART_MspInit+0xe4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252e:	4814      	ldr	r0, [pc, #80]	; (8002580 <HAL_UART_MspInit+0xf4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002530:	69da      	ldr	r2, [r3, #28]
 8002532:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002536:	61da      	str	r2, [r3, #28]
 8002538:	69da      	ldr	r2, [r3, #28]
 800253a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800253e:	9205      	str	r2, [sp, #20]
 8002540:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002542:	695a      	ldr	r2, [r3, #20]
 8002544:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002548:	615a      	str	r2, [r3, #20]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002550:	9306      	str	r3, [sp, #24]
 8002552:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002554:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002558:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	2302      	movs	r3, #2
 800255c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800255e:	2303      	movs	r3, #3
 8002560:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002562:	2307      	movs	r3, #7
 8002564:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002566:	a907      	add	r1, sp, #28
 8002568:	e7b9      	b.n	80024de <HAL_UART_MspInit+0x52>
 800256a:	bf00      	nop
 800256c:	40013800 	.word	0x40013800
 8002570:	40021000 	.word	0x40021000
 8002574:	48000800 	.word	0x48000800
 8002578:	40004400 	.word	0x40004400
 800257c:	40004800 	.word	0x40004800
 8002580:	48000400 	.word	0x48000400

08002584 <NMI_Handler>:
 8002584:	4770      	bx	lr

08002586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002586:	e7fe      	b.n	8002586 <HardFault_Handler>

08002588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002588:	e7fe      	b.n	8002588 <MemManage_Handler>

0800258a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800258a:	e7fe      	b.n	800258a <BusFault_Handler>

0800258c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800258c:	e7fe      	b.n	800258c <UsageFault_Handler>

0800258e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800258e:	4770      	bx	lr

08002590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002590:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002592:	f7fd fe5b 	bl	800024c <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002596:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 800259a:	f7ff b821 	b.w	80015e0 <osSystickHandler>
	...

080025a0 <USART3_IRQHandler>:
 * UART3 interrupt request handler: on reception of a
 * character 't', toggle LED and transmit a character 'T'
 *********************************************************/
void USART3_IRQHandler(void)
{
  HAL_UART_IRQHandler(&huart3);
 80025a0:	4801      	ldr	r0, [pc, #4]	; (80025a8 <USART3_IRQHandler+0x8>)
 80025a2:	f7fe bf61 	b.w	8001468 <HAL_UART_IRQHandler>
 80025a6:	bf00      	nop
 80025a8:	20000eac 	.word	0x20000eac

080025ac <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025ac:	4915      	ldr	r1, [pc, #84]	; (8002604 <SystemInit+0x58>)
 80025ae:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80025b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <SystemInit+0x5c>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80025c4:	6858      	ldr	r0, [r3, #4]
 80025c6:	4a11      	ldr	r2, [pc, #68]	; (800260c <SystemInit+0x60>)
 80025c8:	4002      	ands	r2, r0
 80025ca:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80025d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025d6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025de:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80025e6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80025e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ea:	f022 020f 	bic.w	r2, r2, #15
 80025ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80025f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80025f2:	4a07      	ldr	r2, [pc, #28]	; (8002610 <SystemInit+0x64>)
 80025f4:	4002      	ands	r2, r0
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80025f8:	2200      	movs	r2, #0
 80025fa:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002600:	608b      	str	r3, [r1, #8]
 8002602:	4770      	bx	lr
 8002604:	e000ed00 	.word	0xe000ed00
 8002608:	40021000 	.word	0x40021000
 800260c:	f87fc00c 	.word	0xf87fc00c
 8002610:	ff00fccc 	.word	0xff00fccc

08002614 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800264c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002618:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800261a:	e003      	b.n	8002624 <LoopCopyDataInit>

0800261c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800261e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002620:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002622:	3104      	adds	r1, #4

08002624 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002624:	480b      	ldr	r0, [pc, #44]	; (8002654 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002626:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002628:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800262a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800262c:	d3f6      	bcc.n	800261c <CopyDataInit>
	ldr	r2, =_sbss
 800262e:	4a0b      	ldr	r2, [pc, #44]	; (800265c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002630:	e002      	b.n	8002638 <LoopFillZerobss>

08002632 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002632:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002634:	f842 3b04 	str.w	r3, [r2], #4

08002638 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002638:	4b09      	ldr	r3, [pc, #36]	; (8002660 <LoopForever+0x16>)
	cmp	r2, r3
 800263a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800263c:	d3f9      	bcc.n	8002632 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800263e:	f7ff ffb5 	bl	80025ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002642:	f000 f811 	bl	8002668 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002646:	f7ff fe3b 	bl	80022c0 <main>

0800264a <LoopForever>:

LoopForever:
    b LoopForever
 800264a:	e7fe      	b.n	800264a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800264c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002650:	08002798 	.word	0x08002798
	ldr	r0, =_sdata
 8002654:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002658:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 800265c:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8002660:	20001008 	.word	0x20001008

08002664 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002664:	e7fe      	b.n	8002664 <ADC1_2_IRQHandler>
	...

08002668 <__libc_init_array>:
 8002668:	b570      	push	{r4, r5, r6, lr}
 800266a:	4e0d      	ldr	r6, [pc, #52]	; (80026a0 <__libc_init_array+0x38>)
 800266c:	4c0d      	ldr	r4, [pc, #52]	; (80026a4 <__libc_init_array+0x3c>)
 800266e:	1ba4      	subs	r4, r4, r6
 8002670:	10a4      	asrs	r4, r4, #2
 8002672:	2500      	movs	r5, #0
 8002674:	42a5      	cmp	r5, r4
 8002676:	d109      	bne.n	800268c <__libc_init_array+0x24>
 8002678:	4e0b      	ldr	r6, [pc, #44]	; (80026a8 <__libc_init_array+0x40>)
 800267a:	4c0c      	ldr	r4, [pc, #48]	; (80026ac <__libc_init_array+0x44>)
 800267c:	f000 f82c 	bl	80026d8 <_init>
 8002680:	1ba4      	subs	r4, r4, r6
 8002682:	10a4      	asrs	r4, r4, #2
 8002684:	2500      	movs	r5, #0
 8002686:	42a5      	cmp	r5, r4
 8002688:	d105      	bne.n	8002696 <__libc_init_array+0x2e>
 800268a:	bd70      	pop	{r4, r5, r6, pc}
 800268c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002690:	4798      	blx	r3
 8002692:	3501      	adds	r5, #1
 8002694:	e7ee      	b.n	8002674 <__libc_init_array+0xc>
 8002696:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800269a:	4798      	blx	r3
 800269c:	3501      	adds	r5, #1
 800269e:	e7f2      	b.n	8002686 <__libc_init_array+0x1e>
 80026a0:	08002790 	.word	0x08002790
 80026a4:	08002790 	.word	0x08002790
 80026a8:	08002790 	.word	0x08002790
 80026ac:	08002794 	.word	0x08002794

080026b0 <memcpy>:
 80026b0:	b510      	push	{r4, lr}
 80026b2:	1e43      	subs	r3, r0, #1
 80026b4:	440a      	add	r2, r1
 80026b6:	4291      	cmp	r1, r2
 80026b8:	d100      	bne.n	80026bc <memcpy+0xc>
 80026ba:	bd10      	pop	{r4, pc}
 80026bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026c4:	e7f7      	b.n	80026b6 <memcpy+0x6>

080026c6 <memset>:
 80026c6:	4402      	add	r2, r0
 80026c8:	4603      	mov	r3, r0
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d100      	bne.n	80026d0 <memset+0xa>
 80026ce:	4770      	bx	lr
 80026d0:	f803 1b01 	strb.w	r1, [r3], #1
 80026d4:	e7f9      	b.n	80026ca <memset+0x4>
	...

080026d8 <_init>:
 80026d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026da:	bf00      	nop
 80026dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026de:	bc08      	pop	{r3}
 80026e0:	469e      	mov	lr, r3
 80026e2:	4770      	bx	lr

080026e4 <_fini>:
 80026e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e6:	bf00      	nop
 80026e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ea:	bc08      	pop	{r3}
 80026ec:	469e      	mov	lr, r3
 80026ee:	4770      	bx	lr
